local func = require "ustation/func"
local coor = require "ustation/coor"
local arc = require "ustation/coorarc"
local line = require "ustation/coorline"
local quat = require "ustation/quaternion"
local station = require "ustation/stationlib"
local pipe = require "ustation/pipe"
local ust = require "ustation"
local ustp = require "ustation_planner"

local dump = require "luadump"

local ustmo = ustmo

local unpack = table.unpack
local ma = math
local atan2 = ma.atan2
local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local asin = ma.asin
local min = ma.min

local findMarkers = function(group)
    return pipe.new
        * game.interface.getEntities({pos = game.gui.getTerrainPos(), radius = 1000})
        * pipe.map(game.interface.getEntity)
        * pipe.filter(function(data) return data.fileName and string.match(data.fileName, "utimate_station_planner.con") and data.params and data.params.group == group end)
end

local prefixM = "ust/1990/"
local models = ust.models(prefixM)

local config = {
    hPlatform = 1.2,
    models = ust.models(prefixM),
    roofLength = 0.8,
    tW = 5,
    size = {
        lane = 1,
        laneEdge = -0.5,
        edge = -0.5,
        surface = 0.3,
        access = -4.25,
        roof = {
            edge = -0.5,
            surface = 0.5
        },
        terrain = -0.5
    },
    width = {
        edge = 0.8,
        surface = 3.4,
        roof = {
            edge = 1,
            surface = 3
        }
    }
}

local buildFinal = function(group)
    local tracks = findTrackDraft(group)
    local platforms = findPlatformDraft(group)
    local x = platforms * pipe.map(function(e) return e.params.pos end)
end

local buildDraft = function(markers, params)
    local group = params.group
    if (#markers == 0 or #markers % 2 ~= 0) then return end
    local vecs = markers * pipe.map(function(m) return coor.xyz(1, 0, 0) .. ({coor.decomposite(m.transf)})[2] end)
    local refVec = vecs[1]
    
    local partition =
        vecs
        * pipe.map(function(v) return v:dot(refVec) > 0 end)
        * pipe.zip(markers, {"b", "m"})
        * pipe.fold({pipe.new, pipe.new}, function(r, m) return m.b and {r[1] / m.m, r[2]} or {r[1], r[2] / m.m} end)
    local fm, tm = table.unpack(partition)
    if (#fm == #tm) then
        local sfm = fm
            * pipe.map(function(m)
                local pos, rot = coor.decomposite(m.transf)
                return {m, pos, (coor.xyz(1, 0, 0) .. rot)} end)
            * pipe.sort(function(l, r) return l[3]:cross(r[2] - l[2]).z < 0 end)
            * pipe.map(pipe.select(1))
        local stm = tm
            * pipe.map(function(m)
                local pos, rot = coor.decomposite(m.transf)
                return {m, pos, (coor.xyz(1, 0, 0) .. rot)} end)
            * pipe.sort(function(l, r) return l[3]:cross(r[2] - l[2]).z > 0 end)
            * pipe.map(pipe.select(1))
        
        func.forEach((stm + sfm), function(m)game.interface.setPlayer(m.id, nil) end)
        
        local tracks = pipe.mapn(sfm, stm, func.seq(1, #sfm))(ustp.profile(config).track)
        
        
        local exists = pipe.new
            * game.interface.getEntities({pos = game.gui.getTerrainPos(), radius = 1000})
            * pipe.map(game.interface.getEntity)
            * pipe.fold({track = pipe.new * {}, platform = pipe.new * {}}, function(r, e)
                if (e.params and e.params.group == params.group) then
                    if (e.params.trackId) then return func.with(r, {track = r.track / e}) end
                    if (e.params.platformId) then return func.with(r, {platform = r.platform / e}) end
                end
                return r
            end)
        
        local generatePlatform = function(coords, lTrack, rTrack)
            local profile = {
                tag = "platform",
                coords = coords,
                group = group,
                config = config,
                leftTrack = lTrack,
                rightTrack = rTrack,
            }
            
            local existing = exists.platform * pipe.filter(function(t) return t.params.leftTrack == lTrack and t.params.rightTrack == rTrack end)
            local _ = pipe.new
                * func.seq(1, 2 * (coords.platform.surface.c - 1))
                * pipe.forEach(function(i)
                    local w1 = (coords.platform.edge.lc[i] - coords.platform.edge.rc[i]):length()
                    local w2 = (coords.platform.edge.lc[i + 1] - coords.platform.edge.rc[i + 1]):length()
                    local existing = existing * pipe.filter(function(t) return t.params.pos == i end) * pipe.select(1)
                    if (w1 >= config.tW + 1 and w2 >= config.tW + 1) then
                        if (existing) then
                            ustmo[existing.params.platformId] = profile
                            game.interface.upgradeConstruction(
                                existing.id,
                                existing.fileName,
                                station.pureParams(existing.params)
                            )
                            return existing.id
                        else
                            ustmo[#ustmo + 1] = profile
                            local id = game.interface.buildConstruction(
                                "station/rail/modular/utimate_station_modular_block.con",
                                func.with(station.pureParams(params), {
                                    platformId = #ustmo,
                                    leftTrack = lTrack,
                                    rightTrack = rTrack,
                                    pos = i,
                                }),
                                coords.transf
                            )
                            game.interface.setPlayer(id, game.interface.getPlayer())
                            exists.platform = exists.platform / (game.interface.getEntity(id))
                        end
                    else
                        if (existing) then game.interface.bulldoze(existing.id) end
                    end
                end)
        end
        
        local generateTrack = function(track)
            local profile = {
                tag = "track",
                coords = track,
                group = group,
                config = config,
                number = track.number,
                fm = track.fm.id,
                tm = track.tm.id
            }
            local existing = exists.track * pipe.filter(function(t) return t.params.fm == track.fm.id and t.params.tm == track.tm.id end) * pipe.select(1)
            if (existing) then
                ustmo[existing.params.trackId] = profile
                game.interface.upgradeConstruction(
                    existing.id,
                    existing.fileName,
                    station.pureParams(existing.params)
                )
                return existing.id
            else
                ustmo[#ustmo + 1] = profile
                local id = game.interface.buildConstruction(
                    "station/rail/modular/utimate_station_modular_track.con",
                    func.with(station.pureParams(params), {
                        trackId = #ustmo,
                        fm = track.fm.id,
                        tm = track.tm.id,
                        number = track.number
                    }),
                    track.transf
                )
                game.interface.setPlayer(id, game.interface.getPlayer())
                exists.track = exists.track / game.interface.getEntity(id)
                return id
            end
        end
        
        local function build(tl, tr, ...)
            if (tr == nil) then return generateTrack(tl) end
            local pl = ustp.profile(config).platform(tl, tr)
            
            local hasPlatform =
                pipe.new
                * func.map2(pl.track.lc, pl.track.rc, function(lc, rc) return (lc - rc):length() >= config.tW + 1 end)
                * pipe.filter(pipe.noop())
                * function(ls) return #ls >= 5 end
            
            if (hasPlatform) then
                generatePlatform(
                    pl,
                    generateTrack(tl),
                    generateTrack(tr)
                )
            else
                generateTrack(tl)
            end
            return build(tr, ...)
        end
        
        build(unpack(tracks))
        
        game.interface.upgradeConstruction(
            markers[1].id,
            markers[1].fileName,
            func.with(station.pureParams(markers[1].params), {hasInfo = 1, info = ustm})
    )
    end
end

local updateFn = function(params)
    if (params.mode == 0) then
        local markers = findMarkers(params.group)
        buildDraft(markers, params)
    elseif (params.mode == 1) then
        buildFinal(params.group)
    end
    params.mode = 2
    
    return {
        models = {
            {
                id = "ust/indicator.mdl",
                transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
            }
        },
        edgeLists = {
            {
                type = "TRACK",
                params = {
                    type = "standard.lua",
                    catenary = false
                },
                edges = {
                    {{0.0, 0.0, 0.0}, {5.0, 0.0, 0.0}},
                    {{5.0, 0.0, 0.0}, {5.0, 0.0, 0.0}}
                },
                snapNodes = {0}
            }
        },
        cost = 0,
        bulldozeCost = 0,
        maintenanceCost = 0,
        terrainAlignmentLists = {
            {
                type = "EQUAL",
                faces = {}
            }
        }
    }
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Ultimate Station Modular Planner"),
            description = _("")
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0,
        },
        order = 5010,
        skipCollision = true,
        autoRemovable = false,
        params = {
            {
                key = "mode",
                name = _("Mode"),
                values = {"Draft", "Build", "Reset"},
                defaultIndex = 0
            },
            {
                key = "group",
                name = _("Group"),
                values = {"1", "2", "3", "4", "5"},
                defaultIndex = 0
            }
        },
        updateFn = updateFn
    }
end
