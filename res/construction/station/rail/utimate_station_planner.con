local paramsutil = require "paramsutil"
local func = require "ustation/func"
local coor = require "ustation/coor"
local line = require "ustation/coorline"
local trackEdge = require "ustation/trackedge"
local station = require "ustation/stationlib"
local quat = require "ustation/quaternion"
local pipe = require "ustation/pipe"
local ust = require "ustation"
local uste = require "ustation_entries"
local ustm = require "ustation_menu"

local ma = math

local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local asin = ma.asin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)

local instruction = 
[[Instruction:
1. Place two markers of the same group on the extremity of the planned station
2. Activate "Generic Station" menu
3. Choose the same group, click on "Preview" button to enter into preview mode, configurate other paramters
4. Click on "Build" to construct the station, click on "Clear" to erease the preview
4. The length, slope and radius are locked by the planners, you can't modify them via menu
5. You can rename one of the planner to use override instructions, use the format as follows (00 means number):
 - Start with #
 - L00: length override e.g L120 -> Ref. length = 120m
 - R00: radius override e.g R1500 -> Ref. length = 1500m
 - Lr00: length round-off e.g Lr10 -> Roundoff the length by 10m
 - Rr00: length round-off e.g Rr100 -> Roundoff the radius by 100m
 - T/P: Track and platform configuration, T = Track, P = Platform.
   E.g PTTPTTT -> A 3-track-2-platform station with two transit tracks
]]

local function params()
    return {
        {
            key = "group",
            name = _("Group"),
            values = func.seqMap({1, 5}, tostring),
            defaultIndex = 0
        }
    }
end

local updateFn = function(params)
    return {
        models = {
            {          
                id = "ust/indicator.mdl",
                transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
            }
        },
        edgeLists = params.noEdge and {} or {
			{
				type = "TRACK",
				params = {
					type = "standard.lua",
					catenary = false
				},
				edges = {
					{ { 0.0, 0.0, 0.0 }, 	{ 10.0, 0.0, 0.0 } },
					{ { 10.0, 0.0, 0.0 }, 	{ 10.0, 0.0, 0.0 } }
				},
				snapNodes = { 0 }
			}
		},
        cost = 0,
        bulldozeCost = 0,
        maintenanceCost = 0,
        terrainAlignmentLists = {
            {
                type = "EQUAL",
                faces = {}
            }
        }
    }
end

function data()
    return {
        type = "RAIL_STATION",
        -- buildMode = "MULTI",
        description = {
            name = _("Ultimate Station Planner"),
            description = _("")
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0,
        },
        order = 5011,
        skipCollision = true,
        autoRemovable = false,
        params = params(),
        updateFn = updateFn
    }
end
