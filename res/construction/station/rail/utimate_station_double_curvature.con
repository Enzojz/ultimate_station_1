local paramsutil = require "paramsutil"
local func = require "ustation/func"
local coor = require "ustation/coor"
local arc = require "ustation/coorarc"
local line = require "ustation/coorline"
local trackEdge = require "ustation/trackedge"
local station = require "ustation/stationlib"
local quat = require "ustation/quaternion"
local pipe = require "ustation/pipe"
local ust = require "ustation"
local uste = require "ustation_entries"
local ustm = require "ustation_menu"
local ustp = require "ustation_planner"

local ma = math


local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local asin = ma.asin
local min = ma.min

local prefixM = "ust/1990/"
local buildingList, buildingParamsList = require("ustation_building")(prefixM)
local models = ust.models(prefixM)

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return
        pipe.new
        +
        {
            {
                key = "override",
                name = _("Use Planner"),
                values = {_("No"), _("Preview"), _("Build"), _("Clear")},
                defaultIndex = 0
            },
            {
                key = "overrideGr",
                name = _("Planner Group"),
                values = func.seqMap({1, 5}, tostring),
                defaultIndex = 0
            },
            {
                key = "lengthOverride",
                name = _("Length Source"),
                values = {_("Menu"), _("Instructions"), _("Planner positions")},
                defaultIndex = 0
            },
            {
                key = "slopeOverride",
                name = _("Slope Source"),
                values = {_("Menu"), _("Planner positions")},
                defaultIndex = 1
            }
        }
        + ustm.trackType
        +
        {
            {
                key = "nbTracks",
                name = _("Number of tracks"),
                values = func.map(ustm.trackNumberList, tostring),
            },
            {
                key = "nbTransitTracks",
                name = sp .. "\n" .. _("Transit Tracks"),
                values = func.map({0, 1, 2, 3, 4}, tostring),
                defaultIndex = 0
            },
            {
                key = "posTransitTracks",
                name = _("Position"),
                values = {_("Left"), _("Centre"), _("Sides"), _("Right")},
                defaultIndex = 1
            },
            {
                key = "signA",
                name = sp,
                values = {"+", "-"},
                defaultIndex = 0
            },
            {
                key = "radiusA",
                name = _("Radius") .. " A" .. " " .. "(m)",
                values = pipe.from("∞") + func.map(func.range(ustm.rList, 2, #ustm.rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
                defaultIndex = 0
            },
            {
                key = "signB",
                name = "",
                values = {"+", "-"},
                defaultIndex = 0
            },
            {
                key = "radiusB",
                name = _("Radius") .. " B" .. " " .. "(m)",
                values = pipe.from("∞") + func.map(func.range(ustm.rList, 2, #ustm.rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
                defaultIndex = 0
            },
            {
                key = "length",
                name = sp .. "\n" .. _("Platform") .. "\n\n" .. _("Length") .. " " .. "(m)",
                values = func.map(ustm.trackLengths, tostring),
                defaultIndex = 5
            },
            {
                key = "lengthRatioA",
                name = "\n",
                values = func.seqMap({1, 8}, tostring),
                defaultIndex = 0
            },
            {
                key = "lengthRatioB",
                name = _("Length Ratio A/B"),
                values = func.seqMap({1, 8}, tostring),
                defaultIndex = 0
            }
        }
        + ustm.exclu("hasMiddlePlatform", "convAngle")(ustm.platform)
        + ustm.var
        + ustm.slope
        + ustm.entry
        + ustm.fence
        + ustm.alt
end

local arcPacker = function(length, slope, ratio)
    return function(radiusA, oA, radiusB, oB, lengthVar, dislodge)
        local length = lengthVar and (length * lengthVar) or length
        local dislodgeA = dislodge and (dislodge * length / radiusA) or 0
        local dislodgeB = dislodge and (dislodge * length / radiusB) or 0
        local initRadA = (radiusA > 0 and pi or 0)
        local initRadB = (radiusB > 0 and pi or 0)
        return function(z)
            local z = z or 0
            return function(lengthOverride)
                local l = lengthOverride and lengthOverride(length) or length
                return function(xDr)
                    local dr = xDr or 0
                    local arA = arc.byOR(oA + coor.xyz(0, 0, z), abs(radiusA - dr))
                    local arB = arc.byOR(oB + coor.xyz(0, 0, z), abs(radiusB - dr))
                    local radA = (radiusA > 0 and 1 or -1) * (l * ratio) / arA.r
                    local radB = (radiusB > 0 and 1 or -1) * (l * (1 - ratio)) / arB.r
                    return pipe.new
                        / arA:withLimits({
                            sup = initRadA - radA + dislodgeA,
                            inf = initRadA,
                            slope = -slope
                        })
                        / arB:withLimits({
                            inf = initRadB,
                            sup = initRadB + radB + dislodgeB,
                            slope = slope
                        })
                end
            end
        end
    end
end

local buildStation = function(totalTracks, arcPacker, config, ignoreFst, ignoreLst, build)
    local build = build or ust.build
    local pW = config.wPlatform
    local tW = config.wTrack
    local bandWidth = 0.8
    local pWe = config.wExtPlatform * (pW - bandWidth * 2) + bandWidth * 2
    local fitModel = slope == 0 and ust.fitModel2D or ust.fitModel
    
    local ptList = config.pattern and #config.pattern.p > 0 and pipe.new * config.pattern.p or ust.preBuild(totalTracks, config.nbTransitTracks, config.posTransitTracks, ignoreFst, ignoreLst)(totalTracks, pipe.new)
    local ptListI = ptList * pipe.zip(func.seq(1, #ptList), {"t", "i"})
    
    local refList = ptListI
        * pipe.filter(function(x) return config.varRefIsTrack == x.t end)
        * pipe.map(pipe.select("i"))
        * pipe.sort(function(x, y) return x < y end)
    local middlePos =
        config.pattern and config.pattern.m
        or config.varRefPos < 0 and refList[1]
        or config.varRefPos > 0 and refList[#refList]
        or #refList % 2 == 1 and refList[(#refList + 1) * 0.5] or refList[#refList * 0.5]
    
    local leftGroup = ptListI * pipe.filter(function(p) return p.i < middlePos end) * pipe.rev()
    local middleGroup = ptListI * pipe.filter(function(p) return p.i == middlePos end)
    local rightGroup = ptListI * pipe.filter(function(p) return p.i > middlePos end)
    
    local platformArcGen = ust.platformDualArcGen(tW, pW)(arcPacker)
    
    local lengthFn = function(posPct) return 1 - (1 - config.lExtPlatform) * ust.varFn(config.lExtPlatform)[config.varModelLength](posPct) end
    local widthFn = function(posPct) return (1 - (1 - config.wExtPlatform) * ust.varFn(config.wExtPlatform)[config.varModelWidth](posPct)) * (pW - bandWidth * 2) + bandWidth * 2 end
    
    local function generateArcs(init, initDrA, initXA, initDrB, initXB)
        
        local function arcGen(result, rA, oA, rB, oB, isRight)
            return isRight
                and function(t, ...)
                    if t == nil then
                        return result * pipe.sort(function(l, r) return l.i < r.i end) * pipe.map(pipe.select("a"))
                    else
                        local posPct = abs(t.i - middlePos) / (#rightGroup)
                        local isVar = posPct >= config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        local offsetPct = isVar and -posPct * config.yOffsetPlatform or 0
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPacker(rA - tW, oA, rB - tW, oB, isVar and lengthPct or 1, offsetPct)}},
                                rA - tW, oA, rB - tW, oB, true)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(result / {
                                    i = t.i,
                                    a = {
                                        arcPacker(rA - (0.5 * tW), oA, rB - (0.5 * tW), oB, lengthPct, offsetPct),
                                        arcPacker(rA - (0.5 * tW + pW), oA, rB - (0.5 * tW + pW), oB, lengthPct, offsetPct)
                                    }},
                                rA - pW, oA, rB - pW, oB, true)(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local rA, oA, rB, oB, a = platformArcGen(rA, oA, rB, oB, lengthPct, offsetPct, pWe, true)
                                return arcGen(result / {i = t.i, a = a},
                                    rA, oA, rB, oB, true)(...)
                            end
                        end
                    end
                end
                or function(t, ...)
                    if t == nil then
                        return arcGen(result, initDrA[#initDrA], initXA[#initXA], initDrB[#initDrB], initXB[#initXB], true)(unpack(rightGroup))
                    else
                        local posPct = abs(t.i - middlePos) / (#leftGroup)
                        local isVar = posPct >= config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        local offsetPct = isVar and posPct * config.yOffsetPlatform or 0
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPacker(rA + tW, oA, rB + tW, oB, lengthPct, offsetPct)}},
                                rA + tW, oA, rB + tW, oB)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(result / {
                                    i = t.i,
                                    a = {
                                        arcPacker(rA + (0.5 * tW + pW), oA, rB + (0.5 * tW + pW), oB, lengthPct, offsetPct),
                                        arcPacker(rA + (0.5 * tW), oA, rB + (0.5 * tW), oB, lengthPct, offsetPct)
                                    }},
                                rA + pW, oA, rB + pW, oB)(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local rA, oA, rB, oB, a = platformArcGen(rA, oA, rB, oB, lengthPct, offsetPct, pWe, false)
                                return arcGen(result / {i = t.i, a = a},
                                    rA, oA, rB, oB)(...)
                            end
                        end
                    end
                end
        end
        local rs = arcGen(pipe.new / init, initDrA[1], initXA[1], initDrB[1], initXB[1])(unpack(leftGroup))
        return rs
    end
    
    local allArcs = pipe.exec * function()
        local oA = coor.xyz(config.rA, 0, 0)
        local oB = coor.xyz(config.rB, 0, 0)
        
        if unpack(middleGroup).t then
            return generateArcs(
                {
                    i = middlePos,
                    a = {arcPacker(config.rA, oA, config.rB, oB)}
                },
                {config.rA}, {oA}, {config.rB}, {oB}
        ) else
            local isVar = config.varNbUnaffected == 0
            if (not isVar) then
                return generateArcs(
                    {
                        i = middlePos,
                        a = {
                            arcPacker(config.rA + 0.5 * pW, oA, config.rB + 0.5 * pW, oB),
                            arcPacker(config.rA - 0.5 * pW, oA, config.rB - 0.5 * pW, oB)
                        }
                    },
                    {
                        config.rA - (-0.5 * pW + 0.5 * tW),
                        config.rA - (0.5 * pW - 0.5 * tW)
                    }, {oA},
                    {
                        config.rB - (-0.5 * pW + 0.5 * tW),
                        config.rB - (0.5 * pW - 0.5 * tW)
                    }, {oB}
            )
            else
                local rAR, oAR, rBR, oBR, a = platformArcGen(config.rA + 0.5 * pW, oA, config.rB + 0.5 * pW, oB, 1, 0, widthFn(0), true)
                return generateArcs(
                    {
                        i = middlePos,
                        a = a
                    },
                    {
                        config.rA - (0.5 * tW),
                        rAR
                    }, {oA, oAR},
                    {
                        config.rB - (0.5 * tW),
                        rBR
                    }, {oB, oBR}
            )
            end
        end
    end
    * ust.allArcs(config)
    
    local arcCoords = allArcs * pipe.filter(function(a) return a.isPlatform end)
    local trackCoords = allArcs * pipe.map(function(a)
        if (a.isTrack) then
            local ar = a[1]()()()()[1]
            return ar:pt(ar.inf)
        else
            return false
        end
    end
    )
    local entryConfig = ust.entryConfig(config, allArcs, arcCoords)
    
    local build = build(
        config,
        fitModel,
        pipe.new
        / uste.buildEntry(config, entryConfig)
        / uste.buildUndergroundEntry(config, entryConfig)
        / uste.buildSecondEntrySlope(config, entryConfig)
    )
    return
        unpack(
            pipe.new * {build(pipe.new, pipe.new, pipe.new, pipe.new, pipe.new, ust.trackGrouping(pipe.new, unpack(allArcs)))} / trackCoords
)
end

local updateFn = function()
    return ust.safeBuild(params, function(params)
        if (params.override == 2 and not params.isBuild) then
            local instance = pipe.new
                * game.interface.getEntities({pos = {0, 0}, radius = 900000})
                * pipe.map(game.interface.getEntity)
                * pipe.filter(function(data) return data.params and data.params.seed == params.seed end)
            
            if (#instance == 1) then
                params.overrideParams = instance[1].params.overrideParams
                params.isBuild = true
                params.stationName = instance[1].name or instance[1].params.stationName or nil
            end
        end
        
        local trackType = ustm.trackList[params.trackType + 1]
        local trackWidth = ustm.trackWidthList[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local hPlatform = ustm.hPlatformList[params.hPlatform + 1] * 0.001
        local wPlatform = ustm.wPlatformList[params.wPlatform + 1]
        local roofLength = ustm.roofLengthList[params.roofLength + 1] * 0.01
        local mainBuilding = params.entrySize > 0 and buildingList[params.entrySize]
        local fencesLength = ustm.fencesLengthList[params.fencesStyle + 1]
        local fencesModel = ust.fencesGen(params.fencesColor + 1, params.fencesStyle + 1)
        
        local nbTracks = ustm.trackNumberList[params.nbTracks + 1]
        local radiusA = params.overrideParams and params.overrideParams.radiusA or ((ustm.rList[params.radiusA + 1] * 1000) * (params.signA == 0 and 1 or -1))
        local radiusB = params.overrideParams and params.overrideParams.radiusB or ((ustm.rList[params.radiusB + 1] * 1000) * (params.signB == 0 and 1 or -1))
        local slope = params.overrideParams and params.overrideParams.slope or (ustm.slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1))
        local alt = ustm.hStation[params.altitude + 1] * (params.altitudeSign == 0 and 1 or -1)
        
        local length = params.overrideParams and params.overrideParams.length or min(ustm.trackLengths[params.length + 1], abs(radiusA * pi * 0.75) + abs(radiusB * pi * 0.75))
        local lengthRatio = (params.lengthRatioA + 1) / (params.lengthRatioA + params.lengthRatioB + 2)
        
        local entryConfig = {
            main = {
                pos = mainBuilding and (params.entryPos - 1),
                isLeft = params.entrySide == 0,
                model = mainBuilding,
            },
            street = {
                pipe.mapn(
                    {params.entryAType == 1, params.entryBType == 1, params.entryCType == 1},
                    {params.entryASide < 2, params.entryBSide < 2, params.entryCSide < 2}
                )(function(t, v) return t and v end),
                pipe.mapn(
                    {params.entryAType == 1, params.entryBType == 1, params.entryCType == 1},
                    {params.entryASide > 0, params.entryBSide > 0, params.entryCSide > 0}
                )(function(t, v) return t and v end)
            },
            underground = {
                pipe.mapn(
                    {params.entryAType == 0, params.entryBType == 0, params.entryCType == 0},
                    {params.entryASide < 2, params.entryBSide < 2, params.entryCSide < 2}
                )(function(t, v) return t and v end),
                pipe.mapn(
                    {params.entryAType == 0, params.entryBType == 0, params.entryCType == 0},
                    {params.entryASide > 0, params.entryBSide > 0, params.entryCSide > 0}
                )(function(t, v) return t and v end)
            }
        }
        
        local config = {
            nbTransitTracks = params.nbTransitTracks,
            posTransitTracks = params.posTransitTracks - 2,
            rA = radiusA,
            rB = radiusB,
            hPlatform = hPlatform,
            wPlatform = wPlatform,
            wExtPlatform = ustm.extWidthList[params.wExtPlatform + 1] * 0.01,
            lExtPlatform = ustm.extLengthList[params.lExtPlatform + 1] * 0.01,
            yOffsetPlatform = ustm.yOffsetList[params.yOffsetPlatform + 1] * (params.yOffsetPlatformSign == 0 and 0.01 or -0.01),
            varRefPos = params.varRefPos - 1,
            varRefIsTrack = (params.overrideParams and params.overrideParams.varRefTrack) or params.varRefType == 0,
            varNbUnaffected = ustm.varUnaffectedList[params.varNbUnaffected + 1] * 0.01,
            varModelLength = params.varModelLength + 1,
            varModelWidth = params.varModelWidth + 1,
            wTrack = trackWidth,
            roofLength = roofLength,
            buildingParams = buildingParamsList[params.entrySize],
            slope = slope,
            fencesModel = fencesModel,
            fencesLength = fencesLength,
            leftFences = params.fencesPos == 1 or params.fencesPos == 3,
            rightFences = params.fencesPos == 2 or params.fencesPos == 3,
            entries = entryConfig,
            models = models,
            pattern = params.overrideParams and params.overrideParams.pattern or nil,
            length = length,
            name = params.stationName or nil
        }
        
        
        local arcPacker = arcPacker(length, slope, lengthRatio)
        
        if (params.showPreview) then
            return ustp.updatePreview(params, config, arcPacker, buildStation)
        elseif (params.override == 1 or params.override == 3 or (params.override == 2 and not params.isBuild)) then
            local markers = ustp.findMarkers(params.overrideGr)
            if (#markers == 2 or params.override > 1) then
                return ustp.updatePlanner(params, markers, config)
            end
        end
        
        local edge, streetEdge, terminals, terminalsGroup, models, terrain, trackCoords =
            buildStation(nbTracks,
                arcPacker,
                config,
                params.hasLeftPlatform == 0,
                params.hasRightPlatform == 0
        )
        return
            pipe.new
            * {
                edgeLists = pipe.new
                / (pipe.new * {edge * station.mergeEdges} * station.prepareEdges * trackBuilder.nonAligned())
                + streetEdge,
                models = terminals + models,
                terminalGroups = terminalsGroup,
                terrainAlignmentLists = station.mergePoly(unpack(terrain))(),
                groundFaces = terrain
                * pipe.map(pipe.select("equal"))
                * pipe.filter(pipe.noop())
                * pipe.flatten()
                * pipe.map(function(f) return {
                    {face = f, modes = {{type = "FILL", key = "industry_gravel_small_01"}}},
                    {face = f, modes = {{type = "STROKE_OUTER", key = "building_paving"}}}
                } end)
                * pipe.flatten()
            }
            * station.setHeight(alt)
            * (
            params.isBuild
            and ustp.displace(config, trackCoords)
            or pipe.noop()
    )
    end)
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Progressive/Counter Curvature Station"),
            description = _("Station that platform and track parameters can be fine-tuned, with two different radii at two extremities of the platforms.")
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0,
        },
        order = 5012,
        params = params(),
        updateFn = updateFn()
    }
end
