local paramsutil = require "paramsutil"
local func = require "ustation/func"
local coor = require "ustation/coor"
local line = require "ustation/coorline"
local trackEdge = require "ustation/trackedge"
local station = require "ustation/stationlib"
local quat = require "ustation/quaternion"
local pipe = require "ustation/pipe"
local ust = require "ustation"

local dump = require "datadumper"

local ma = math

local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)

local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local rList = {ust.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local hPlatformList = {200, 280, 380, 550, 680, 760, 915, 960, 1100, 1219, 1250, 1380}
local wPlatformList = {4, 5, 6, 7, 8}
local roofLengthList = {100, 95, 80, 75, 50, 25, 0}
local extWidthList = {100, 75, 50, 25, 10}
local extLengthList = {100, 90, 80, 75, 70, 65, 60, 55, 50, 40}
local varUnaffectedList = {0, 10, 25, 50, 75, 90}

local trackLengths = {50, 80, 100, 160, 200, 240, 320, 400, 480, 500, 550, 850, 1050, 1750}
local trackNumberList = {1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 18, 20}
local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}

local buildingList = {
    "main_building_size1.mdl",
    "main_building_size2.mdl",
    "main_building_size4.mdl",
    "main_building_size5.mdl",
}

local fencesLengthList = {
    2, 2.5, 2
}

local bZ = 0.8
local buildingParamsList = {
    {
        entry = {
            coor.xyz(-8, 1.5, -bZ),
            coor.xyz(-8, -1.5, -bZ)
        },
        platform = {
            coor.xyz(5, 1.5, 0),
            coor.xyz(5, -1.5, 0)
        },
        pass = {
            coor.xyz(1, 0, -bZ)
        },
        street = coor.xyz(-12 + 2, 0, 0),
        halfWidth = 9,
        xOffset = 5.3
    },
    {
        entry = {
            coor.xyz(-8, 1.5, -bZ),
            coor.xyz(-8, -1.5, -bZ)
        },
        platform = {
            coor.xyz(5, 1.5, 0),
            coor.xyz(5, -1.5, 0)
        },
        pass = {
            coor.xyz(0, 0, 0)
        },
        street = coor.xyz(-12 + 2, 0, 0),
        halfWidth = 15.5,
        xOffset = 5.3
    },
    {
        entry = {
            coor.xyz(-8, 1.5, -bZ),
            coor.xyz(-8, -1.5, -bZ)
        },
        platform = {
            coor.xyz(5, 1.8, 0),
            coor.xyz(5, -1.8, 0)
        },
        pass = {
            coor.xyz(0, 0, 0)
        },
        street = coor.xyz(-12 + 2, 0, 0),
        halfWidth = 22.5,
        xOffset = 5.3
    },
    {
        entry = {
            coor.xyz(-8, 1.5, -bZ),
            coor.xyz(-8, -1.5, -bZ)
        },
        platform = {
            coor.xyz(5, 1.8, 0),
            coor.xyz(5, -1.8, 0)
        },
        pass = {
            coor.xyz(0, 0, 0)
        },
        street = coor.xyz(-12 + 2, 0, 0),
        halfWidth = 30,
        xOffset = 5.3
    }
}

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return {
        {
            key = "nbTracks",
            name = _("Number of tracks"),
            values = func.map(trackNumberList, tostring),
        },
        {
            key = "length",
            name = _("Platform length") .. "(m)",
            values = func.map(trackLengths, tostring),
            defaultIndex = 3
        },
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "trackLayout",
            name = _("Track Layout"),
            values = func.map({1, 2, 3, 4}, tostring),
            defaultIndex = 1
        },
        {
            key = "nbTransitTracks",
            name = sp .. "\n" .. _("Transit Tracks"),
            values = func.map({0, 1, 2, 3, 4}, tostring),
            defaultIndex = 0
        },
        {
            key = "posTransitTracks",
            name = _("Position"),
            values = {_("Left"), _("Centre"), _("Sides"), _("Right")},
            defaultIndex = 1
        },
        {
            key = "sign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radius",
            name = _("Radius") .. "(m)",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "hPlatform",
            name = sp .. "\n" .. _("Platform") .. "\n\n" .. _("Height") .. "(mm)",
            values = func.map(hPlatformList, tostring),
            defaultIndex = 3
        },
        {
            key = "wPlatform",
            name = _("Width") .. "(m)",
            values = func.map(wPlatformList, tostring),
            defaultIndex = 1
        },
        {
            key = "roofLength",
            name = _("Roof length") .. "(%)",
            values = func.map(roofLengthList, tostring),
            defaultIndex = 3
        },
        {
            key = "wExtPlatform",
            name = sp .. "\n" .. _("Platform Variation") .. "\n",
            values = func.map(extWidthList, tostring),
            defaultIndex = 0
        },
        {
            key = "varModelWidth",
            name = _("Narrowest Extremity Width") .. "(%)",
            values = {_("Uniform"), _("Linear"), _("Quadratic"), _("Quartic"), _("Gaussain"), _("Gaussain 2")},
            defaultIndex = 1
        },
        {
            key = "lExtPlatform",
            name = "",
            values = func.map(extLengthList, tostring),
            defaultIndex = 0
        },
        {
            key = "varModelLength",
            name = _("Shortest Platform") .. "(%)",
            values = {_("Uniform"), _("Linear"), _("Quadratic"), _("Quartic"), _("Gaussain"), _("Gaussain 2")},
            defaultIndex = 1
        },
        {
            key = "varRefType",
            name = "",
            values = {_("Track"), _("Platform")},
            defaultIndex = 1
        },
        {
            key = "varRefPos",
            name = _("Reference"),
            values = {_("Left"), _("Center"), _("Right")},
            defaultIndex = 0
        },
        {
            key = "varNbUnaffected",
            name = _("Unaffected platforms") .. "(%)",
            values = func.map(varUnaffectedList, tostring),
            defaultIndex = 0
        },
        {
            key = "slopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slope",
            name = _("Slope") .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "entrySize",
            name = sp .. "\n" .. _("Entry"),
            values = {"S", "M", "L", "XL"},
            defaultIndex = 1
        },
        {
            key = "entryPos",
            name = _("Position"),
            values = {_("A"), _("Default"), _("B")},
            defaultIndex = 1
        },
        {
            key = "entryAType",
            name = _("Second Entry A Type"),
            values = { _("Underground"), _("Surface"), _("None")},
            defaultIndex = 1,
        },
        {
            key = "entryBType",
            name = _("Second Entry B Type"),
            values = { _("Underground"), _("Surface"), _("None")},
            defaultIndex = 1,
        },
        {
            key = "entryCType",
            name = _("Second Entry C Type"),
            values = { _("Underground"), _("Surface"), _("None")},
            defaultIndex = 1,
        },
        {
            key = "fencesPos",
            name = sp .. "\n" .. _("Fences"),
            values = {"None", "A", "B", "A+B"},
            defaultIndex = 0
        },
        {
            key = "fencesStyle",
            name = _("Fences Style"),
            values = {"A", "B", "C"},
            defaultIndex = 0
        },
        {
            key = "fencesColor",
            name = _("Fences Color"),
            values = {"White", "Green", "Yellow"},
            defaultIndex = 0
        }
    }
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    param.trackType = param.trackType or 0
    param.catenary = param.catenary or 0
    
    func.forEach(
        func.filter(params({}), function(p) return p.key ~= "tramTrack" end),
        function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end


local function trackGrouping(result, ar1, ar2, ar3, ...)
    if (ar1 == nil) then return table.unpack(result) end
    
    if (ar1 and ar2 and ar3) then
        if #ar1 == 1 and #ar2 == 2 and #ar3 == 1 then
            return trackGrouping(result / {ar1, ar2, ar3}, ...)
        end
    end
    
    if (ar1 and ar2) then
        if (#ar1 + #ar2 == 3) then
            return trackGrouping(result / {ar1, ar2}, ar3, ...)
        end
    end
    
    return trackGrouping(result / {ar1}, ar2, ar3, ...)
end

local buildEntry = function(config, allArcs)
    local il = pipe.interlace({"i", "s"})
    local refZ = config.hPlatform + 0.53
    local arcCoords = allArcs
        * pipe.filter(function(a) return #a == 2 end)
        * pipe.map(function(p)
            local arcL, arcR = table.unpack(p)
            local l, r = arcL(refZ)(function(l) return l - 3 end)(1), arcR(refZ)(function(l) return l - 3 end)(-1)
            local ls, rs = arcL(refZ)()(-0.5), arcR(refZ)()(0.5)
            local lc, rc, c = ust.bitLatCoords(l, r, 10)
            local lsc, rsc, sc = ust.bitLatCoords(ls, rs, 5)
            return {
                lane = {l = l, r = r, lc = lc, rc = rc, c = c},
                platform = {l = ls, r = rs, lc = lsc, rc = rsc, c = sc},
                hasLower = c - 2 - floor(c * 0.5) > 0 and c - 3 > 0,
                hasUpper = c + 2 + floor(c * 0.5) <= #lc and c + 3 <= #lc
            }
        end)
    local function retriveRef()
        local pl, la = arcCoords[1].platform, arcCoords[1].lane
        local lc, rc, c = ust.bitLatCoords(la.l, la.r, 5)
        
        if (config.entryPos == 0) then
            local refPt = lc[c]
            return refPt,
                la.l[1]:rad(refPt) - la.l[1]:rad(lc[c]),
                rc[c],
                pl.lc[pl.c]:avg(pl.rc[pl.c])
        elseif (config.entryPos > 0) then
            local refPt = lc[floor(c * 0.6)]
            return refPt,
                la.l[1]:rad(refPt) - la.l[1]:rad(lc[c]),
                rc[floor(c * 0.6)],
                pl.lc[pl.c - 3 - floor(pl.c * 0.5)]:avg(pl.rc[pl.c - 3 - floor(pl.c * 0.5)])
        else
            local refPt = lc[ceil(c * 1.4)]
            return refPt,
                la.l[2]:rad(refPt) - la.l[1]:rad(lc[c]),
                rc[ceil(c * 1.4)],
                pl.lc[pl.c + 3 + floor(pl.c * 0.5)]:avg(pl.rc[pl.c + 3 + floor(pl.c * 0.5)])
        end
    end
    
    local refPt, refVec, cpt, cupt = retriveRef()
    
    local function strCoor(l, r, b)
        local vec = (r - l):withZ(0):normalized() * 1.5
        return
            {
                ust.unitLane(l:avg(r):withZ(refPt.z - 9) + (-vec .. coor.rotZ(0.5 * pi)), b),
                ust.unitLane(l:avg(r):withZ(refPt.z - 9) + (vec .. coor.rotZ(0.5 * pi)), l:avg(r):withZ(refPt.z - 9) + (-vec .. coor.rotZ(0.5 * pi))),
            }
    end
    
    local buildLanes = function()
        return arcCoords
            * pipe.map(function(p)
                local pl, la = p.platform, p.lane
                local flac = floor(la.c * 0.5)
                local fplc = floor(pl.c * 0.5)
                return pipe.new
                    / ust.unitLane(la.lc[la.c - 2], pl.lc[pl.c - 4]:avg(pl.rc[pl.c - 4]))
                    / ust.unitLane(la.rc[la.c - 2], pl.lc[pl.c - 4]:avg(pl.rc[pl.c - 4]))
                    / ust.unitLane(la.lc[la.c + 2], pl.lc[pl.c + 4]:avg(pl.rc[pl.c + 4]))
                    / ust.unitLane(la.rc[la.c + 2], pl.lc[pl.c + 4]:avg(pl.rc[pl.c + 4]))
                    +
                    (p.hasLower and {
                        ust.unitLane(la.lc[la.c - 3]:avg(la.rc[la.c - 3], la.rc[la.c - 2], la.lc[la.c - 2]), pl.lc[pl.c - 4]:avg(pl.rc[pl.c - 4])),
                        ust.unitLane(la.lc[la.c - 2 - flac], pl.lc[pl.c - 4 - fplc]:avg(pl.rc[pl.c - 4 - fplc])),
                        ust.unitLane(la.rc[la.c - 2 - flac], pl.lc[pl.c - 4 - fplc]:avg(pl.rc[pl.c - 4 - fplc])),
                    } or {})
                    +
                    (p.hasUpper and {
                        ust.unitLane(la.lc[la.c + 3]:avg(la.rc[la.c + 3], la.rc[la.c + 2], la.lc[la.c + 2]), pl.lc[pl.c + 4]:avg(pl.rc[pl.c + 4])),
                        ust.unitLane(la.lc[la.c + 2 + flac], pl.lc[pl.c + 4 + fplc]:avg(pl.rc[pl.c + 4 + fplc])),
                        ust.unitLane(la.rc[la.c + 2 + flac], pl.lc[pl.c + 4 + fplc]:avg(pl.rc[pl.c + 4 + fplc]))
                    } or {})
                    + func.map2(il(func.range(pl.lc, pl.c - 3, pl.c + 3)), il(func.range(pl.rc, pl.c - 3, pl.c + 3)), function(lc, rc)
                        local b = lc.i:avg(rc.i)
                        local t = lc.s:avg(rc.s)
                        local vec = t - b
                        return station.newModel("person_lane.mdl", ust.mRot(vec), coor.trans(b), coor.transZ(-3.5))
                    end)
            end)
            * pipe.flatten()
            +
            pipe.new
            * {arcCoords[1], arcCoords[#arcCoords]}
            * pipe.map(function(p)
                local pl, la = p.platform, p.lane
                local fplc = floor(pl.c * 0.5)
                return pipe.new
                    + (p.hasUpper and strCoor(
                        pl.lc[pl.c + 2 + fplc],
                        pl.rc[pl.c + 2 + fplc],
                        pl.lc[pl.c + 3 + fplc]:avg(pl.rc[pl.c + 3 + fplc]) - coor.xyz(0, 0, 3.5)
                    ) or {})
                    + (p.hasLower and strCoor(
                        pl.rc[pl.c - 2 - fplc],
                        pl.lc[pl.c - 2 - fplc],
                        pl.lc[pl.c - 3 - fplc]:avg(pl.rc[pl.c - 3 - fplc]) - coor.xyz(0, 0, 3.5)
                    ) or {})
                    + strCoor(
                        pl.lc[pl.c],
                        pl.rc[pl.c],
                        pl.lc[pl.c + 2]:avg(pl.rc[pl.c + 2]) - coor.xyz(0, 0, 3.5)
                    )
                    + strCoor(
                        pl.rc[pl.c],
                        pl.lc[pl.c],
                        pl.lc[pl.c - 2]:avg(pl.rc[pl.c - 2]) - coor.xyz(0, 0, 3.5)
            )
            end)
            * pipe.flatten()
            +
            arcCoords
            * pipe.map(function(p)
                local pl, la = p.platform, p.lane
                local fplc = floor(pl.c * 0.5)
                return pipe.new
                    / (pl.lc[pl.c]:avg(pl.rc[pl.c]) + coor.xyz(0, 0, -3.5))
                    + (p.hasUpper and {pl.lc[pl.c + 3 + fplc]:avg(pl.rc[pl.c + 3 + fplc]) - coor.xyz(0, 0, 3.5)} or {})
                    + (p.hasLower and {pl.lc[pl.c - 3 - fplc]:avg(pl.rc[pl.c - 3 - fplc]) - coor.xyz(0, 0, 3.5)} or {})
            end)
            * pipe.interlace({"l", "r"})
            * pipe.map(function(p)
                return pipe.mapn(p.l, p.r)(function(pt, nPt)
                    return station.newModel("person_lane.mdl", ust.mRot((nPt - pt)), coor.trans(pt))
                end)
            end)
            * pipe.flatten()
    end
    
    local buildEntryPath = function()
        local mx = coor.transX(-config.buildingParams.xOffset) * coor.rotZ(refVec) * coor.trans(refPt)
        local m = coor.rotX(atan(-config.slope)) * mx
        return
            pipe.new
            * func.map(config.buildingParams.platform, function(p) return ust.unitLane(p .. m, cpt) end)
            + func.map(config.buildingParams.entry, function(p) return ust.unitLane(p .. m, coor.xyz(-10, p.y > 0 and 4.5 or -4.5, -0.8) .. mx) end)
            + func.map(config.buildingParams.pass, function(p) return ust.unitLane(p .. m, cupt - coor.xyz(0, 0, 3.5)) end)
            + {station.newModel(config.entryModel, coor.rotZ(-pi * 0.5), m, coor.transZ(-0.78))}
    end
    
    local makeFace = function(f, t)
        local f0 = f + coor.xyz(0, 0, 8)
        local t0 = t + coor.xyz(0, 0, 8)
        local vec = t0 - f0
        local vect = (vec .. coor.rotZ(pi * 0.5)):normalized() * 4
        return pipe.new * {f0 + vect, f0 - vect, t0 - vect, t0 + vect} * pipe.map(coor.vec2Tuple)
    end
    
    local buildAccessRoad = function()
        local mVe = coor.rotZ(refVec)
        local mPt = coor.transX(-config.buildingParams.xOffset) * mVe * coor.trans(refPt)
        local mainAccess = {
            edge = pipe.new / {
            (config.buildingParams.street .. mPt):withZ(refPt.z - 0.8),
                ((config.buildingParams.street - coor.xyz(20, 0, 0)) .. mPt):withZ(refPt.z - 0.8),
                coor.xyz(-1, 0, 0) .. mVe,
                coor.xyz(-1, 0, 0) .. mVe
            },
            snap = pipe.new / {false, true}
        }
        
        local street = pipe.new
            * {arcCoords[1], arcCoords[#arcCoords]}
            * pipe.mapi(function(p, i)
                local pl = p.platform
                local lpt = pipe.new
                    / pl.lc[pl.c]
                    / (p.hasUpper and pl.lc[pl.c + 2 + floor(pl.c * 0.5)] or false)
                    / (p.hasLower and pl.lc[pl.c - 2 - floor(pl.c * 0.5)] or false)
                
                local rpt = pipe.new
                    / pl.rc[pl.c]
                    / (p.hasUpper and pl.rc[pl.c + 2 + floor(pl.c * 0.5)] or false)
                    / (p.hasLower and pl.rc[pl.c - 2 - floor(pl.c * 0.5)] or false)
                
                return pipe.mapn(lpt, rpt)(function(l, r)
                    return (l and r) and {pt = l:avg(r):withZ(refPt.z - 9), vec = (r - l):withZ(0):normalized()} or false
                end)
            end)
            * function(ls) return func.map({1, 2, 3}, function(i) return ls * pipe.map(pipe.select(i)) end) end
            * pipe.mapi(function(ls, i)
                local idxPt = allArcs
                    * pipe.zip(func.seq(1, #allArcs), {"p", "i"})
                    * pipe.filter(function(a) return #(a.p) == 2 end)
                    * pipe.map(pipe.select("i"))
                
                local fst = func.min(idxPt, function(l, r) return l < r end)
                local lst = func.max(idxPt, function(l, r) return l < r end)
                return (#ls == 2)
                    and {
                        underground = pipe.new
                        / {
                            ls[1].pt - ls[1].vec * (8 + (fst - 1) * config.wTrack),
                            ls[1].pt,
                            ls[1].vec,
                            ls[1].vec,
                        }
                        / {
                            ls[2].pt,
                            ls[2].pt + ls[2].vec * (8 + (#allArcs - lst) * config.wTrack),
                            ls[2].vec,
                            ls[2].vec,
                        }
                        + (#arcCoords == 1 and {} or {
                            {
                                ls[1].pt,
                                ls[2].pt,
                                ls[1].vec,
                                ls[2].vec,
                            }
                        }
                        ),
                        surface = pipe.new
                        / {
                            ls[2].pt + ls[2].vec * (8 + (#allArcs - lst) * config.wTrack),
                            ls[2].pt + ls[2].vec * (20 + (#allArcs - lst) * config.wTrack),
                            ls[2].vec,
                            ls[2].vec,
                        }
                        +
                        (
                        i == 1 and {} or {
                            {
                                ls[1].pt - ls[1].vec * (20 + (fst - 1) * config.wTrack),
                                ls[1].pt - ls[1].vec * (8 + (fst - 1) * config.wTrack),
                                ls[1].vec,
                                ls[1].vec,
                            }
                        }
                        ),
                        faces = pipe.new
                        / makeFace(
                            ls[2].pt + ls[2].vec * (7 + (#allArcs - lst) * config.wTrack),
                            ls[2].pt + ls[2].vec * (0 + (#allArcs - lst) * config.wTrack)
                        )
                        / (
                        i == 1 and false or makeFace(
                            ls[1].pt - ls[1].vec * (0 + (fst - 1) * config.wTrack),
                            ls[1].pt - ls[1].vec * (7 + (fst - 1) * config.wTrack)
                    ))
                    }
                    or false
            end)
            * pipe.filter(pipe.noop())
            * function(ls)
                local ug = ls * pipe.map(function(ls) return {
                    edge = ls.underground,
                    snap = pipe.new * pipe.rep(#ls.underground)({false, false})
                } end)
                local su = ls * pipe.map(function(ls) return {
                    edge = ls.surface,
                    snap = pipe.new / {false, true} / {true, false} * pipe.range(1, #ls.surface)
                } end)
                return {ug, su, ls * pipe.map(pipe.select("faces")) * pipe.flatten() * pipe.filter(pipe.noop())}
            end
        
        return pipe.new / mainAccess, table.unpack(street)
    end
    
    local buildFace = function()
        local z = -0.8
        local mRot = coor.rotX(atan(-config.slope))
        local mX = coor.transX(-config.buildingParams.xOffset) * coor.rotZ(refVec) * coor.trans(refPt)
        local xMin = config.buildingParams.street.x
        local xMax = config.buildingParams.xOffset
        local yMin = -config.buildingParams.halfWidth
        local yMax = config.buildingParams.halfWidth
        return pipe.new
            / {
                coor.xyz(config.buildingParams.entry[1].x, yMin, z) .. mRot * mX,
                coor.xyz(xMax, yMin, z) .. mRot * mX,
                coor.xyz(xMax, yMax, z) .. mRot * mX,
                coor.xyz(config.buildingParams.entry[1].x, yMax, z) .. mRot * mX
            }
            / {
                coor.xyz(config.buildingParams.street.x, yMin, z) .. mX,
                coor.xyz(config.buildingParams.entry[1].x, yMin, z) .. mRot * mX,
                coor.xyz(config.buildingParams.entry[1].x, yMax, z) .. mRot * mX,
                coor.xyz(config.buildingParams.street.x, yMax, z) .. mX
            }
            * pipe.map(pipe.map(coor.vec2Tuple))
    end
    
    return buildEntryPath(), buildFace(), buildLanes(), buildAccessRoad()
end

local buildStation = function(totalTracks, arcPacker, config, ignoreFst, ignoreLst)
    local pW = config.wPlatform
    local tW = config.wTrack
    local bandWidth = 0.8
    local pWe = config.wExtPlatform * (pW - bandWidth * 2) + bandWidth * 2
    local fitModel = slope == 0 and ust.fitModel2D or ust.fitModel
    local generateEdges = ust.generateEdges
    local generateModels = ust.generateModels(fitModel, config)
    local generateFences = ust.generateFences(fitModel, config)
    local generateTerminals = ust.generateTerminals(config)
    local generateTerrain = ust.generateTerrain()
    
    local function preBuild(nbTracks, result)
        local p = false
        local t = true
        local transitSeq = pipe.new * pipe.rep(config.nbTransitTracks)(t)
        if (nbTracks == 0) then
            if (#transitSeq > 0) then
                if (config.posTransitTracks == -2) then
                    result = transitSeq + result
                elseif (config.posTransitTracks == 1) then
                    result = result + transitSeq
                elseif (config.posTransitTracks == 0) then
                    result = pipe.new * pipe.rep(ceil(config.nbTransitTracks * 0.5))(t) + result + pipe.new * pipe.rep(floor(config.nbTransitTracks * 0.5))(t)
                else
                    local idx = result * pipe.zip(func.seq(1, #result), {"t", "i"}) * pipe.filter(function(p) return not p.t end) * pipe.map(pipe.select("i"))
                    result = result * pipe.range(1, idx[ceil(#idx * 0.5)]) + transitSeq + result * pipe.range(idx[ceil(#idx * 0.5)] + 1, #result)
                end
            end
            return result
        elseif (nbTracks == totalTracks and (not ignoreFst or totalTracks == 1)) then
            return preBuild(nbTracks - 1, result / p / t)
        elseif (nbTracks == 1 and ignoreLst) then
            return preBuild(nbTracks - 1, result / p / t)
        elseif (nbTracks == 1 and not ignoreLst) then
            return preBuild(nbTracks - 1, result / t / p)
        else
            return preBuild(nbTracks - 2, result / t / p / t)
        end
    end
    
    local ptList = preBuild(totalTracks, pipe.new)
    local ptListI = ptList * pipe.zip(func.seq(1, #ptList), {"t", "i"})
    local refList = ptListI
        * pipe.filter(function(x) return config.varRefIsTrack and x.t or not x.t end)
        * pipe.map(pipe.select("i"))
        * pipe.sort(function(x, y) return x < y end)
    local middlePos =
        config.varRefPos < 0 and refList[1]
        or config.varRefPos > 0 and refList[#refList]
        or #refList % 2 == 1 and refList[(#refList + 1) * 0.5] or refList[#refList * 0.5]
    
    local leftGroup = ptListI * pipe.filter(function(p) return p.i < middlePos end) * pipe.rev()
    local middleGroup = ptListI * pipe.filter(function(p) return p.i == middlePos end)
    local rightGroup = ptListI * pipe.filter(function(p) return p.i > middlePos end)
    
    local function platformArcGen(r, o, lPct, pWe, isRight)
        local inner = arcPacker(r - (isRight and 1 or -1) * (0.5 * tW), o, lPct)
        local li, ls = table.unpack(inner()()())
        local ri, rs = table.unpack(arcPacker(r - (isRight and 1 or -1) * (0.5 * tW + pW), o, lPct)()()())
        local mlpt = li:pt(li.inf)
        local mrpt = ri:pt(ri.inf)
        local mvec = (mrpt - mlpt):normalized()
        local f = mvec:dot(mlpt - li.o) > 0 and 1 or -1
        
        local elpt = li:pt(li.sup)
        local erpt = (elpt - li.o):normalized() * f * pWe + elpt
        
        local mln = line.byVecPt(mvec, mrpt)
        local pln = line.byVecPt(mvec .. coor.rotZ(pi * 0.5), erpt)
        local xpt = (mln - pln):withZ(0)
        
        local rvec = (xpt - mrpt):dot(coor.xyz(1, 0, 0))
        
        local lenP2 = (xpt - erpt):length2()
        local lenT = (xpt - mrpt):length()
        local r = (lenP2 / lenT + lenT) * 0.5 * (rvec > 0 and 1 or -1)
        local o = mrpt + (xpt - mrpt):normalized() * abs(r)
        
        return r + 0.5 * tW * (isRight and 1 or -1), o, {
            isRight and inner or arcPacker(r, o, lPct),
            isRight and arcPacker(r, o, lPct) or inner
        }
    end
    
    local function generateArcs(init, initDr, initX)
        local varFn = function(base) return
            {
                function(_) return 1 end,
                function(x) return x end,
                function(x) return x * x end,
                function(x) return pow(x, 4) end,
                function(x) return 1 - pow(e, -x * x * 4.5) end,
                function(x) return pow(e, -pow(6 * x - 3, 2) * 0.5) end,
            }
        end
        
        local lengthFn = function(posPct) return 1 - (1 - config.lExtPlatform) * varFn(config.lExtPlatform)[config.varModelLength](posPct) end
        local widthFn = function(posPct) return (1 - (1 - config.wExtPlatform) * varFn(config.wExtPlatform)[config.varModelWidth](posPct)) * (pW - bandWidth * 2) + bandWidth * 2 end
        
        local function arcGen(result, r, o, isRight)
            return isRight
                and function(t, ...)
                    if t == nil then
                        return result * pipe.sort(function(l, r) return l.i < r.i end) * pipe.map(pipe.select("a"))
                    else
                        local posPct = abs(t.i - middlePos) / (#rightGroup)
                        local isVar = posPct > config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPacker(r - tW, o, isVar and lengthPct or 1)}},
                                r - tW, o, true)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(result / {
                                    i = t.i,
                                    a = {
                                        arcPacker(r - (0.5 * tW), o, lengthPct),
                                        arcPacker(r - (0.5 * tW + pW), o, lengthPct)
                                    }},
                                r - pW, o, true)(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local r, o, a = platformArcGen(r, o, lengthPct, pWe, true)
                                return arcGen(result / {i = t.i, a = a},
                                    r, o, true)(...)
                            end
                        end
                    end
                end
                or function(t, ...)
                    if t == nil then
                        return arcGen(result, initDr[#initDr], initX, true)(table.unpack(rightGroup))
                    else
                        local posPct = abs(t.i - middlePos) / (#leftGroup)
                        local isVar = posPct > config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPacker(r + tW, o, lengthPct)}},
                                r + tW, o)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(result / {
                                    i = t.i,
                                    a = {
                                        arcPacker(r + (0.5 * tW + pW), o, lengthPct),
                                        arcPacker(r + (0.5 * tW), o, lengthPct)
                                    }},
                                r + pW, o)(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local r, o, a = platformArcGen(r, o, lengthPct, pWe, false)
                                return arcGen(result / {i = t.i, a = a},
                                    r, o)(...)
                            end
                        end
                    end
                end
        end
        return arcGen(pipe.new / init, initDr[1], initX)(table.unpack(leftGroup))
    end
    
    local allArcs = pipe.exec * function()
        local o = coor.xyz(config.r, 0, 0)
        if table.unpack(middleGroup).t then
            return generateArcs(
                {
                    i = middlePos,
                    a = {arcPacker(config.r, o)}
                },
                {config.r}, o
        ) else
            return generateArcs(
                {
                    i = middlePos,
                    a = {
                        arcPacker(config.r + 0.5 * pW, o),
                        arcPacker(config.r - 0.5 * pW, o)
                    }
                },
                {
                    config.r - (-0.5 * pW + 0.5 * tW),
                    config.r - (0.5 * pW - 0.5 * tW)
                }, o
        ) end
    end
    
    local function build(edges, terminals, terminalsGroup, models, terrain, gr, ...)
        if (gr == nil) then
            local buildEntryPath, buildFace, buildLanes, buildAccessRoad, street, street2, streetFaces = buildEntry(config, allArcs)
            return edges, buildAccessRoad, street, street2, terminals, terminalsGroup,
                models + buildEntryPath + buildLanes,
                terrain + buildFace + streetFaces
        elseif (#gr == 3) then
            edges = generateEdges(edges, true, gr[1][1])
            edges = generateEdges(edges, false, gr[3][1])
            terminals, terminalsGroup = generateTerminals(edges, terminals, terminalsGroup, gr[2][1], gr[2][2], {true, true})
            return build(
                edges,
                terminals,
                terminalsGroup,
                models + generateModels(gr[2][1], gr[2][2], #models == 0 and -1 or #{...} == 0 and 1 or 0)
                + (config.leftFences and #models == 0 and generateFences(gr[1][1], gr[1][1], true, true) or {})
                + (config.rightFences and #{...} == 0 and generateFences(gr[3][1], gr[3][1], false, true) or {}),
                terrain + generateTerrain(gr[2][1], gr[2][2]),
                ...)
        elseif (#gr == 2 and #gr[1] == 1 and #gr[2] == 2) then
            edges = generateEdges(edges, true, gr[1][1])
            terminals, terminalsGroup = generateTerminals(edges, terminals, terminalsGroup, gr[2][1], gr[2][2], {true, false})
            return build(
                edges,
                terminals,
                terminalsGroup,
                models
                + generateModels(gr[2][1], gr[2][2], #models == 0 and -1 or #{...} == 0 and 1 or 0)
                + (config.leftFences and #models == 0 and generateFences(gr[1][1], gr[1][1], true, true) or {})
                + (config.rightFences and #{...} == 0 and generateFences(gr[2][2], gr[2][2], false, false) or {}),
                terrain + generateTerrain(gr[2][1], gr[2][2]),
                ...)
        elseif (#gr == 2 and #gr[1] == 2 and #gr[2] == 1) then
            edges = generateEdges(edges, false, gr[2][1])
            terminals, terminalsGroup = generateTerminals(edges, terminals, terminalsGroup, gr[1][1], gr[1][2], {false, true})
            return build(edges,
                terminals,
                terminalsGroup,
                models
                + generateModels(gr[1][1], gr[1][2], #models == 0 and -1 or #{...} == 0 and 1 or 0)
                + (config.leftFences and #models == 0 and generateFences(gr[1][1], gr[1][1], true, false) or {})
                + (config.rightFences and #{...} == 0 and generateFences(gr[2][1], gr[2][1], false, true) or {}),
                terrain + generateTerrain(gr[1][1], gr[1][2]),
                ...)
        else
            edges = generateEdges(edges, false, gr[1][1])
            return build(edges,
                terminals,
                terminalsGroup,
                models,
                terrain,
                ...)
        end
    end
    
    return build(pipe.new, pipe.new, pipe.new, pipe.new, pipe.new, trackGrouping(pipe.new, table.unpack(allArcs)))
end

local updateFn = function()
    return function(params)
        defaultParams(params)
        
        local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local hPlatform = hPlatformList[params.hPlatform + 1] * 0.001
        local wPlatform = wPlatformList[params.wPlatform + 1]
        local roofLength = roofLengthList[params.roofLength + 1] * 0.01
        local mainBuilding = buildingList[params.entrySize + 1]
        local fencesLength = fencesLengthList[params.fencesStyle + 1]
        local fencesModel = {
            "fences/" .. tostring(params.fencesColor + 1) .. "/platform_fences_" .. tostring(params.fencesStyle + 1) .. ".mdl",
            "fences/" .. tostring(params.fencesColor + 1) .. "/platform_fences_pole_" .. tostring(params.fencesStyle + 1) .. ".mdl",
        }
        
        
        local nbTracks = trackNumberList[params.nbTracks + 1]
        local radius = (rList[params.radius + 1] * 1000) * (params.sign == 0 and 1 or -1)
        local slope = slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1)
        
        local length = min(trackLengths[params.length + 1], abs(radius * pi * 1.5))
        
        local edge, streetEdge, ugStreet, street2, terminals, terminalsGroup, models, terrain =
            buildStation(nbTracks,
                ust.arcPacker(length, slope),
                {
                    nbTransitTracks = params.nbTransitTracks,
                    posTransitTracks = params.posTransitTracks - 2,
                    r = radius,
                    hPlatform = hPlatform,
                    wPlatform = wPlatform,
                    wExtPlatform = extWidthList[params.wExtPlatform + 1] * 0.01,
                    lExtPlatform = extLengthList[params.lExtPlatform + 1] * 0.01,
                    varRefPos = params.varRefPos - 1,
                    varRefIsTrack = params.varRefType == 0,
                    varNbUnaffected = varUnaffectedList[params.varNbUnaffected + 1] * 0.01,
                    varModelLength = params.varModelLength + 1,
                    varModelWidth = params.varModelWidth + 1,
                    wTrack = 5,
                    roofLength = roofLength,
                    buildingParams = buildingParamsList[params.entrySize + 1],
                    slope = slope,
                    fencesModel = fencesModel,
                    fencesLength = fencesLength,
                    entryModel = mainBuilding,
                    entryPos = params.entryPos - 1,
                    leftFences = params.fencesPos == 1 or params.fencesPos == 3,
                    rightFences = params.fencesPos == 2 or params.fencesPos == 3,
                    entryTypes = {
                        A = params.entryAType - 1,
                        B = params.entryBType - 1,
                        C = params.entryCType - 1
                    }
                },
                ({true, false, true, false})[params.trackLayout + 1],
                (nbTracks % 2 == 0 and {false, false, true, true} or {true, true, false, false})[params.trackLayout + 1]
        )
        return
            pipe.new
            * {
                edgeLists = pipe.new
                / (pipe.new * {edge * station.mergeEdges} * station.prepareEdges * trackBuilder.normal())
                / (pipe.new * {streetEdge * station.mergeEdges} * station.prepareEdges * pipe.with(
                    {
                        type = "STREET",
                        params =
                        {
                            type = "station_new_small.lua",
                            tramTrackType = "NO"
                        }
                    }
                ))
                -- / (pipe.new * {ugStreet * station.mergeEdges} * station.prepareEdges * pipe.with(
                --     {
                --         type = "STREET",
                --         edgeType = "TUNNEL",
                --         edgeTypeName = "ust_void.lua",
                --         params =
                --         {
                --             type = "station_pass.lua",
                --             tramTrackType = "NO"
                --         }
                --     }
                -- ))
                -- / (pipe.new * {street2 * station.mergeEdges} * station.prepareEdges * pipe.with(
                --     {
                --         type = "STREET",
                --         alignTerrain = true,
                --         params =
                --         {
                --             type = "station_pass.lua",
                --             tramTrackType = "NO"
                --         }
                --     }
                -- ))
                ,
                models = terminals + models,
                terminalGroups = terminalsGroup,
                terrainAlignmentLists = {
                    {
                        type = "EQUAL",
                        faces = terrain,
                        slopeLow = 0.75,
                        slopeHigh = 2.5
                    }
                },
                groundFaces = terrain * pipe.map(function(f) return {
                    {face = f, modes = {{type = "FILL", key = "industry_gravel_small_01"}}},
                    {face = f, modes = {{type = "STROKE_OUTER", key = "building_paving"}}}
                } end) * pipe.flatten()
            }
    end
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Ultimate Station"),
            description = _("One or many tracks with fix radious and signaling spacing.")
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0,
        },
        order = 27218,
        params = params(),
        updateFn = updateFn()
    }
end
