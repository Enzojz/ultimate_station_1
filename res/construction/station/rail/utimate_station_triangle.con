local paramsutil = require "paramsutil"
local func = require "ustation/func"
local coor = require "ustation/coor"
local line = require "ustation/coorline"
local arc = require "ustation/coorarc"
local trackEdge = require "ustation/trackedge"
local station = require "ustation/stationlib"
local pipe = require "ustation/pipe"
local ust = require "ustation"
local uste = require "ustation_entries"
local ustm = require "ustation_menu"
local ma = math

local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)

local prefixM = "ust/1990/"
local buildingList, buildingParamsList = require("ustation_building")(prefixM)
local models = ust.models(prefixM)

local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return pipe.new + ustm.trackType +
        {
            {
                key = "nbTracksA",
                name = sp .. "\n" .. _("Number of tracks") .. "\n\n" .. "A",
                values = func.map(ustm.trackNumberList, tostring),
                defaultIndex = 1
            },
            {
                key = "nbTracksB",
                name = "B",
                values = func.map(ustm.trackNumberList, tostring),
                defaultIndex = 1
            },
            {
                key = "nbTransitTracksA",
                name = sp .. "\n" .. _("Transit Tracks") .. "\n\n" .. "A",
                values = func.map({0, 1, 2, 3, 4}, tostring),
                defaultIndex = 0
            },
            {
                key = "posTransitTracksA",
                name = _("Position"),
                values = {_("Centre"), _("Outter")},
                defaultIndex = 0
            },
            {
                key = "nbTransitTracksB",
                name = "\n" .. "B",
                values = func.map({0, 1, 2, 3, 4}, tostring),
                defaultIndex = 0
            },
            {
                key = "posTransitTracksB",
                name = _("Position"),
                values = {_("Centre"), _("Outter")},
                defaultIndex = 0
            },
            {
                key = "radiusA",
                name = sp .. "\n" .. _("Radius") .. " " .. "(m)" .. "\n\n" .. "A",
                values = pipe.from("∞") +
                func.map(
                    func.range(ustm.rList, 2, #ustm.rList),
                    function(r)
                        return tostring(math.floor(r * 1000 + 0.5))
                    end
                ),
                defaultIndex = 0
            },
            {
                key = "radiusB",
                name = "B",
                values = pipe.from("∞") +
                func.map(
                    func.range(ustm.rList, 2, #ustm.rList),
                    function(r)
                        return tostring(math.floor(r * 1000 + 0.5))
                    end
                ),
                defaultIndex = 0
            },
            {
                key = "curveLayout",
                name = _("Polarity"),
                values = {"--", "-+", "++"},
                defaultIndex = 1
            },
            {
                key = "lengthA",
                name = sp .. "\n" .. _("Platform") .. "\n\n" .. _("Length") .. " " .. "(m)" .. "\n\n" .. "A",
                values = func.map(ustm.trackLengths, tostring),
                defaultIndex = 5
            },
            {
                key = "lengthB",
                name = "B",
                values = func.map(ustm.trackLengths, tostring),
                defaultIndex = 5
            }
        } +
        ustm.platform +
        {
            {
                key = "lengthMiddlePlatform",
                name = _("Central Platform Length") .. "(%)",
                values = func.map(ustm.middlePlatformLength, tostring),
                defaultIndex = 3
            }
        } +
        ustm.exclu("varRefType", "varRefPos")(ustm.var) +
        ustm.slope +
        ustm.entry +
        ustm.fence +
        ustm.alt
end
local il = pipe.interlace({"s", "i"})


local arcPacker = function(length, slope, rot, con)
    return function(radius, o, lengthVar, dislodge)
        local lengthVar = lengthVar and (1 - lengthVar) or 0
        local dislodge = dislodge and (dislodge * length / radius) or 0
        return function(z)
            local z = z or 0
            return function(lengthOverride)
                local l = lengthOverride and lengthOverride(length) or length
                return function(xDr)
                    local dr = xDr or 0
                    local ar = arc.byOR(o + coor.xyz(0, 0, z), abs(radius - dr))
                    local dRad = (radius > 0 and 1 or -1) * (l - length * lengthVar) / ar.r * 0.5
                    local initRad = (radius > 0 and pi or 0) + rot + con
                    return pipe.new
                        / ar:withLimits({
                            sup = initRad - dislodge - dRad,
                            inf = initRad - dislodge,
                            slope = -slope
                        }
                        )
                        / ar:withLimits({
                            inf = initRad - dislodge,
                            sup = initRad - dislodge + dRad,
                            slope = slope
                        }
                )
                end
            end
        end
    end
end

local function retriveRef(config, allArcs)
    if (not config.buildingParams) then
        return false
    end
    
    local arcsL, arcsR
    for i = 1, #allArcs - 1 do
        if #allArcs[i] > 1 and #allArcs[i + 1] > 1 then
            arcsL, arcsR = allArcs[i], allArcs[i + 1]
        end
    end
    
    if (arcsL and arcsR) then
        local ptL = arcsL.surface.rc[arcsL.platform.common + 1]
        local ptR = arcsR.surface.lc[arcsL.platform.common + 1]
        
        if (ptL - ptR):length() > (config.buildingParams.halfWidth) * 2 then
            return function()
                local refVec = (ptL - ptR):normalized() .. coor.rotZ(-0.5 * pi)
                local refPt = ptL:avg(ptR) + refVec
                return refPt, ust.mRot(refVec), arcsL.lane.rc[arcsL.lane.common - 1]:avg(
                    arcsR.lane.lc[arcsL.lane.common - 1],
                    arcsR.lane.lc[arcsL.lane.common],
                    arcsL.lane.rc[arcsL.lane.common]
                ), arcsL.surface.rc[arcsL.platform.common - 1]:avg(arcsR.surface.lc[arcsL.platform.common - 1])
            end
        end
    end
    
    return false
end

local buildStation = function(nbTracksA, nbTracksB, arcPackerA, arcPackerB, config, hasFirst, hasCentral, hasLast)
    local pW = config.wPlatform
    local tW = config.wTrack
    local bandWidth = 0.8
    local pWe = config.wExtPlatform * (pW - bandWidth * 2) + bandWidth * 2
    local fitModel = slope == 0 and ust.fitModel2D or ust.fitModel
    
    local ptListA = ust.preBuild(nbTracksA, config.nbTransitTracksA, config.posTransitTracksA, not hasCentral, not hasFirst)(nbTracksA, pipe.new) * pipe.rev()
    local ptListB = ust.preBuild(nbTracksB, config.nbTransitTracksB, config.posTransitTracksB, not hasCentral, not hasLast)(nbTracksB, pipe.new)
    
    local ptListIA = ptListA * pipe.range(1, #ptListA - (hasCentral and 1 or 0)) * pipe.zip(func.seq(1, #ptListA), {"t", "i"})
    local ptListIB = ptListB * pipe.range(hasCentral and 2 or 1, #ptListB) * pipe.zip(func.seq(#ptListA + 1, #ptListA + #ptListB + 1), {"t", "i"})
    
    local middlePos = hasCentral and #ptListA or (#ptListA + 0.5)
    local leftGroup = ptListIA * pipe.rev()
    local middleGroup = pipe.new * (hasCentral and {{i = #ptListA, t = false}} or {})
    local rightGroup = ptListIB
    
    local platformArcGen = ust.platformArcGen(tW, pW)
    
    local lengthFn = function(posPct)
        return 1 - (1 - config.lExtPlatform) * ust.varFn(config.lExtPlatform)[config.varModelLength](posPct)
    end
    local widthFn = function(posPct)
        return (1 - (1 - config.wExtPlatform) * ust.varFn(config.wExtPlatform)[config.varModelWidth](posPct)) * (pW - bandWidth * 2) + bandWidth * 2
    end
    
    local function generateArcs(init, initDr, initX)
        local function arcGen(result, r, o, isRight)
            return isRight and
                function(t, ...)
                    if t == nil then
                        return result
                            * pipe.sort(function(l, r) return l.i < r.i end)
                            * pipe.map(pipe.select("a"))
                            * pipe.fold(pipe.new, function(r, a) return #a == 4 and (r / {a[1], a[3]} / {a[4], a[2]}) or (r / a) end)
                    else
                        local posPct = abs(t.i - middlePos) / (#rightGroup)
                        local isVar = posPct >= config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        local offsetPct = isVar and -posPct * config.yOffsetPlatform or 0
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPackerB(r - tW, o, isVar and lengthPct or 1, offsetPct)}}, r - tW, o, true)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(
                                    result /
                                    {
                                        i = t.i,
                                        a = {
                                            arcPackerB(r - (0.5 * tW), o, lengthPct, offsetPct),
                                            arcPackerB(r - (0.5 * tW + pW), o, lengthPct, offsetPct)
                                        }
                                    },
                                    r - pW,
                                    o,
                                    true
                                )(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local r, o, a = platformArcGen(arcPackerB)(r, o, lengthPct, offsetPct, pWe, true)
                                return arcGen(result / {i = t.i, a = a}, r, o, true)(...)
                            end
                        end
                    end
                end or
                function(t, ...)
                    if t == nil then
                        return arcGen(result, initDr[#initDr], initX[#initX], true)(table.unpack(rightGroup))
                    else
                        local posPct = abs(t.i - middlePos) / (#leftGroup)
                        local isVar = posPct >= config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        local offsetPct = isVar and posPct * config.yOffsetPlatform or 0
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPackerA(r + tW, o, lengthPct, offsetPct)}}, r + tW, o)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(
                                    result /
                                    {
                                        i = t.i,
                                        a = {
                                            arcPackerA(r + (0.5 * tW + pW), o, lengthPct, offsetPct),
                                            arcPackerA(r + (0.5 * tW), o, lengthPct, offsetPct)
                                        }
                                    },
                                    r + pW,
                                    o
                                )(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local r, o, a = platformArcGen(arcPackerA)(r, o, lengthPct, offsetPct, pWe, false)
                                return arcGen(result / {i = t.i, a = a}, r, o)(...)
                            end
                        end
                    end
                end
        end
        local rs = arcGen(init, initDr[1], initX[1])(table.unpack(leftGroup))
        return rs
    end
    local allArcs =
        pipe.exec *
        function()
            local oA = coor.xyz(config.rA, 0, 0)
            local oB =
                coor.xyz(config.rB, 0, 0) + coor.xyz(cos(config.convRad) - 1, sin(config.convRad), 0) * config.rB +
                coor.xyz(1 - cos(config.convRad), sin(config.convRad), 0) * pW
            if (hasCentral) then
                local arcA = arcPackerA(config.rA + 0.5 * pW, oA)
                local arcB = arcPackerB(config.rB - 0.5 * pW, oB)
                local _, _, arcAi = platformArcGen(arcPackerA)(config.rA + 0.5 * pW + 0.5 * tW, oA, 1, 0, pWe, true)
                local _, _, arcBi = platformArcGen(arcPackerB)(config.rB - 0.5 * pW + 0.5 * tW, oB, 1, 0, pWe, false)
                return generateArcs(
                    pipe.new /
                    {
                        i = middlePos,
                        a = {
                            arcA,
                            arcB,
                            arcAi[2],
                            arcBi[2]
                        }
                    },
                    {
                        config.rA - (-0.5 * pW + 0.5 * tW),
                        config.rB - (0.5 * pW - 0.5 * tW)
                    },
                    {oA, oB}
            )
            else
                return generateArcs(
                    pipe.new * {},
                    {
                        config.rA - (0.5 * tW),
                        config.rB - (-0.5 * tW)
                    },
                    {oA, oB}
            )
            end
        end
        * ust.allArcs(arcGen, config)
        * function(allArcs)
            for i = 1, #allArcs - 1 do
                if #allArcs[i] > 1 and #allArcs[i + 1] > 1 then
                    local arcsL, arcsR = allArcs[i], allArcs[i + 1]
                    local greater = function(x, y) return x > y and x or y end
                    
                    
                    local retriveBaseParams = function(arcsL, arcsR)
                        local intersection = greater(ust.coordIntersection(arcsL.rc, arcsR.lc))
                        
                        local max = arcsL.c > arcsR.c and 2 * (arcsR.c - 1) or 2 * (arcsL.c - 1)
                        local r =
                            pipe.new
                            * (pipe.mapn(
                                func.seq(intersection, max),
                                arcsL.rc * pipe.range(intersection, max + 1) * il,
                                arcsR.lc * pipe.range(intersection, max + 1) * il
                            )
                            (function(i, l, r)
                                local vecL = (l.i - l.s):withZ(0)
                                local vecR = (r.i - l.s):withZ(0)
                                local vec = (r.s - l.s):withZ(0)
                                return vec:cross(vecL).z > 0 and vec:cross(vecR).z < 0 and i or false
                            end
                            ))
                            * pipe.filter(pipe.noop())
                            * function(r) return #r > 0 and r[#r] or max end
                        return intersection, intersection + floor(config.lengthMiddlePlatform * (r - intersection))
                    end
                    
                    local intersection, commonLength = retriveBaseParams(arcsL.platform, arcsR.platform)
                    
                    local ln = line.byPtPt(arcsL.surface.rc[commonLength + 1], arcsR.surface.lc[commonLength + 1])
                    local retriveParams = function(arcsL, arcsR)
                        local intersection = greater(ust.coordIntersection(arcsL.rc, arcsR.lc))
                        local max = arcsL.c > arcsR.c and 2 * (arcsR.c - 1) or 2 * (arcsL.c - 1)
                        local commonLength =
                            pipe.exec
                            * function()
                                local r =
                                    pipe.new
                                    * (pipe.mapn(
                                        func.seq(intersection, max - 1),
                                        arcsL.rc * pipe.range(intersection, max) * il,
                                        arcsR.lc * pipe.range(intersection, max) * il
                                    )
                                    (function(i, l, r)
                                        local xL = line.byPtPt(l.i, l.s) - ln
                                        local xR = line.byPtPt(r.i, r.s) - ln
                                        return ((l.i - xL):dot(l.s - xL) < 0 or (r.i - xR):dot(r.s - xR) < 0) and i or false
                                    end)
                                    )
                                    * pipe.filter(pipe.noop())
                                    * function(r) return #r > 0 and r[1] or max end
                                return floor(r)
                            end
                        return intersection, commonLength
                    end
                    
                    local roofIntersection, roofCommonLength = retriveParams(arcsL.roof.edge, arcsR.roof.edge)
                    local roofPoleIntersection = retriveBaseParams(arcsL.roof.pole, arcsR.roof.pole)
                    local chairIntersection = retriveBaseParams(arcsL.chair, arcsR.chair)
                    local laneIntersection, laneCommonLength = retriveParams(arcsL.laneEdge, arcsR.laneEdge)
                    
                    
                    local ptL = arcsL.surface.lc[intersection]
                    local ptR = arcsR.surface.rc[intersection]
                    local vec = ptR - ptL
                    
                    local lL = (arcsL.surface.lc[intersection + 1] - arcsL.surface.rc[intersection + 1]):length()
                    local rL = (arcsR.surface.lc[intersection + 1] - arcsR.surface.rc[intersection + 1]):length()
                    local mL = (arcsR.surface.lc[intersection + 1] - arcsL.surface.rc[intersection + 1]):length()
                    
                    arcsL.platform.intersection = intersection
                    arcsR.platform.intersection = intersection
                    arcsL.lane.intersection = laneIntersection
                    arcsR.lane.intersection = laneIntersection
                    arcsL.terrain.intersection = intersection
                    arcsR.terrain.intersection = intersection
                    
                    arcsL.lane.common = laneCommonLength
                    arcsR.lane.common = laneCommonLength
                    arcsL.platform.common = commonLength
                    arcsR.platform.common = commonLength
                    arcsL.terrain.common = commonLength
                    arcsR.terrain.common = commonLength
                    
                    arcsL.platformO = func.with(arcsL.platform, {})
                    arcsR.platformO = func.with(arcsR.platform, {})
                    arcsL.platform.rc = func.with(arcsL.platform.rc, {[intersection] = ptL + vec * (lL / (lL + rL + mL))})
                    arcsR.platform.lc = func.with(arcsR.platform.lc, {[intersection] = ptL + vec * ((mL + lL) / (lL + rL + mL))})
                    arcsL.surface.rc = func.with(arcsL.surface.rc, {[intersection] = arcsL.platform.rc[intersection] - vec:normalized() * 0.8})
                    arcsR.surface.lc = func.with(arcsR.surface.lc, {[intersection] = arcsR.platform.lc[intersection] + vec:normalized() * 0.8})
                    
                    if (config.roofLength > 0) then
                        local ptL = arcsL.roof.edge.lc[roofIntersection]
                        local ptR = arcsR.roof.edge.rc[roofIntersection]
                        local vec = ptR - ptL
                        
                        local lL = (arcsL.roof.edge.lc[roofIntersection + 1] - arcsL.roof.edge.rc[roofIntersection + 1]):length()
                        local rL = (arcsR.roof.edge.lc[roofIntersection + 1] - arcsR.roof.edge.rc[roofIntersection + 1]):length()
                        local mL = (arcsR.roof.edge.lc[roofIntersection + 1] - arcsL.roof.edge.rc[roofIntersection + 1]):length()
                        
                        arcsL.roof.intersection = roofIntersection
                        arcsL.roof.common = roofCommonLength
                        arcsR.roof.intersection = roofIntersection
                        arcsR.roof.common = roofCommonLength
                        arcsL.roof.edge.rc = func.with(arcsL.roof.edge.rc, {[roofIntersection] = ptL + vec * (lL / (lL + rL + mL))})
                        arcsR.roof.edge.lc = func.with(arcsR.roof.edge.lc, {[roofIntersection] = ptL + vec * ((mL + lL) / (lL + rL + mL))})
                        arcsL.roof.surface.rc = func.with(arcsL.roof.surface.rc, {[roofIntersection] = arcsL.roof.edge.rc[roofIntersection] - vec:normalized() * 0.8})
                        arcsR.roof.surface.lc = func.with(arcsR.roof.surface.lc, {[roofIntersection] = arcsR.roof.edge.lc[roofIntersection] + vec:normalized() * 0.8})
                        arcsL.roof.pole.intersection = roofPoleIntersection
                        arcsR.roof.pole.intersection = roofPoleIntersection
                        arcsL.chair.intersection = chairIntersection
                        arcsR.chair.intersection = chairIntersection
                    end
                end
            end
            return allArcs
        end
    
    local arcCoords = allArcs * pipe.filter(function(a) return #a > 1 end)
    local retriveRef = retriveRef(config, allArcs)
    
    local entryConfig = ust.entryConfig(config, allArcs, arcCoords, retriveRef)
    
    local build =
        ust.build(
            config,
            fitModel,
            pipe.new
            / buildEntry(config, entryConfig, retriveRef)
            / buildUndergroundEntry(config, entryConfig)
            / uste.buildSecondEntrySlope(config, entryConfig)
    )
    return build(pipe.new, pipe.new, pipe.new, pipe.new, pipe.new, ust.trackGrouping(pipe.new, table.unpack(allArcs)))
end

local updateFn = function()
    return ust.safeBuild(
        params,
        function(params)
            local trackType = ustm.trackList[params.trackType + 1]
            local trackWidth = ustm.trackWidthList[params.trackType + 1]
            local catenary = params.catenary == 1
            local trackBuilder = trackEdge.builder(catenary, trackType)
            local hPlatform = ustm.hPlatformList[params.hPlatform + 1] * 0.001
            local wPlatform = ustm.wPlatformList[params.wPlatform + 1]
            local roofLength = ustm.roofLengthList[params.roofLength + 1] * 0.01
            local mainBuilding = params.entrySize > 0 and buildingList[params.entrySize]
            local fencesLength = ustm.fencesLengthList[params.fencesStyle + 1]
            local fencesModel = ust.fencesGen(params.fencesColor + 1, params.fencesStyle + 1)
            
            local nbTracksA = ustm.trackNumberList[params.nbTracksA + 1]
            local nbTracksB = ustm.trackNumberList[params.nbTracksB + 1]
            local radiusA = (ustm.rList[params.radiusA + 1] * 1000) * (params.curveLayout == 2 and 1 or -1)
            local radiusB = (ustm.rList[params.radiusB + 1] * 1000) * (params.curveLayout == 0 and -1 or 1)
            
            if (params.curveLayout == 0 and radiusA < radiusB) or (params.curveLayout == 2 and radiusA < radiusB) then
                radiusA, radiusB = radiusB, radiusA
            end
            
            local slope = ustm.slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1)
            
            local lengthA = min(ustm.trackLengths[params.lengthA + 1], abs(radiusA * pi * 1.5))
            local lengthB = min(ustm.trackLengths[params.lengthB + 1], abs(radiusB * pi * 1.5))
            
            local entryConfig = {
                main = {
                    pos = mainBuilding and (params.entryPos - 1),
                    model = mainBuilding
                },
                street = {
                    pipe.mapn(
                        {params.entryAType == 1, params.entryBType == 1, params.entryCType == 1},
                        {params.entryASide < 2, params.entryBSide < 2, params.entryCSide < 2}
                        )(
                        function(t, v)
                            return t and v
                        end
                    ),
                    pipe.mapn(
                        {params.entryAType == 1, params.entryBType == 1, params.entryCType == 1},
                        {params.entryASide > 0, params.entryBSide > 0, params.entryCSide > 0}
                        )(
                        function(t, v)
                            return t and v
                        end
                )
                },
                underground = {
                    pipe.mapn(
                        {params.entryAType == 0, params.entryBType == 0, params.entryCType == 0},
                        {params.entryASide < 2, params.entryBSide < 2, params.entryCSide < 2}
                    )
                    (function(t, v) return t and v end),
                    pipe.mapn(
                        {params.entryAType == 0, params.entryBType == 0, params.entryCType == 0},
                        {params.entryASide > 0, params.entryBSide > 0, params.entryCSide > 0}
                    )
                    (function(t, v) return t and v end)
                }
            }
            
            local edge, streetEdge, terminals, terminalsGroup, models, terrain =
                buildStation(
                    nbTracksA,
                    nbTracksB,
                    arcPacker(lengthA, slope, lengthA / radiusA * 0.5, 0),
                    arcPacker(lengthB, slope, lengthB / radiusB * 0.5, pi * ustm.convAngle[params.convAngle + 1] / 180),
                    {
                        nbTransitTracksA = params.nbTransitTracksA,
                        posTransitTracksA = params.posTransitTracksA,
                        nbTransitTracksB = params.nbTransitTracksB,
                        posTransitTracksB = params.posTransitTracksB,
                        convRad = pi * ustm.convAngle[params.convAngle + 1] / 180,
                        rA = radiusA,
                        rB = radiusB,
                        hPlatform = hPlatform,
                        wPlatform = wPlatform,
                        wExtPlatform = ustm.extWidthList[params.wExtPlatform + 1] * 0.01,
                        lExtPlatform = ustm.extLengthList[params.lExtPlatform + 1] * 0.01,
                        yOffsetPlatform = ustm.yOffsetList[params.yOffsetPlatform + 1] * (params.yOffsetPlatformSign == 0 and 0.01 or -0.01),
                        varNbUnaffected = ustm.varUnaffectedList[params.varNbUnaffected + 1] * 0.01,
                        varModelLength = params.varModelLength + 1,
                        varModelWidth = params.varModelWidth + 1,
                        wTrack = trackWidth,
                        roofLength = roofLength,
                        buildingParams = buildingParamsList[params.entrySize],
                        slope = slope,
                        fencesModel = fencesModel,
                        fencesLength = fencesLength,
                        leftFences = params.fencesPos == 1 or params.fencesPos == 3,
                        rightFences = params.fencesPos == 2 or params.fencesPos == 3,
                        entries = entryConfig,
                        models = models,
                        lengthMiddlePlatform = ustm.middlePlatformLength[params.lengthMiddlePlatform + 1] * 0.01
                    },
                    params.hasLeftPlatform == 1,
                    params.hasMiddlePlatform == 1,
                    params.hasRightPlatform == 1
            )
            return pipe.new *
                {
                    edgeLists = pipe.new / (pipe.new * {edge * station.mergeEdges} * station.prepareEdges * trackBuilder.normal()) + streetEdge,
                    models = terminals + models,
                    terminalGroups = terminalsGroup,
                    terrainAlignmentLists = station.mergePoly(table.unpack(terrain))(),
                    groundFaces = terrain * pipe.map(pipe.select("equal")) * pipe.filter(pipe.noop()) * pipe.flatten() *
                    pipe.map(
                        function(f)
                            return {
                                {face = f, modes = {{type = "FILL", key = "industry_gravel_small_01"}}},
                                {face = f, modes = {{type = "STROKE_OUTER", key = "building_paving"}}}
                            }
                        end
                    ) *
                    pipe.flatten()
                }
        end
)
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Triangle Station"),
            description = _("Station that platform and track parameters can be fine-tuned, with two different radii on two sides of the station.")
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0
        },
        order = 5013,
        params = params(),
        updateFn = updateFn()
    }
end
