local paramsutil = require "paramsutil"
local func = require "ustation/func"
local coor = require "ustation/coor"
local line = require "ustation/coorline"
local arc = require "ustation/coorarc"
local trackEdge = require "ustation/trackedge"
local station = require "ustation/stationlib"
local pipe = require "ustation/pipe"
local ust = require "ustation"
local uste = require "ustation_entries"

local ma = math

local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)

local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local rList = {ust.infi * 0.001, 5, 3.5, 2, 1, 4 / 5, 2 / 3, 3 / 5, 1 / 2, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 1 / 8, 1 / 10, 1 / 20}
local hPlatformList = {200, 280, 380, 550, 680, 760, 915, 960, 1100, 1219, 1250, 1380}
local wPlatformList = {4, 5, 6, 7, 8, 10, 12, 14, 15}
local hStation = {0, 1, 2, 3, 4, 5, 6}
local roofLengthList = {100, 95, 80, 75, 50, 25, 0}
local extWidthList = {100, 75, 50, 25, 10}
local extLengthList = {100, 90, 80, 75, 70, 65, 60, 55, 50}
local varUnaffectedList = {0, 10, 25, 50, 75, 90}
local yOffsetList = {0, 10, 20, 30, 40}

local trackLengths = {40, 60, 80, 100, 140, 160, 200, 240, 320, 400, 480, 500, 550, 850, 1050, 1750}
local trackNumberList = {1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 18, 20}
local slopeList = {0, 2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}

local fencesLengthList = {2, 2.5, 2}
local buildingList, buildingParamsList = table.unpack(require("ustation_building"))

local fencesGen = function(colorCode, styleCode)
    return {
        "ust/fences/" .. tostring(colorCode) .. "/platform_fences_" .. tostring(styleCode) .. ".mdl",
        "ust/fences/" .. tostring(colorCode) .. "/platform_fences_pole_" .. tostring(styleCode) .. ".mdl",
    }
end

local prefixM = function(p) return "ust/1990/platform/" .. p end
local models = {
    surface = prefixM("platform_surface"),
    extremity = prefixM("platform_extremity"),
    corner = prefixM("platform_corner"),
    edge = prefixM("platform_edge"),
    edgeOpen = prefixM("platform_edge_open"),
    roofTop = prefixM("platform_roof_top"),
    roofExtremity = prefixM("platform_roof_extremity"),
    roofEdge = prefixM("platform_roof_edge"),
    roofCorner = prefixM("platform_roof_corner"),
    roofPole = prefixM("platform_roof_pole"),
    stair = prefixM("platform_stair"),
    trash = prefixM("platform_trash"),
    chair = prefixM("platform_chair"),
    underground = "ust/1990/underground_entry.mdl",
    access = "ust/1990/platform/platform_access_t"
}
local function params()
    local sp = "·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·:·\n"
    return {
        paramsutil.makeTrackTypeParam(),
        paramsutil.makeTrackCatenaryParam(),
        {
            key = "nbTracksA",
            name = sp .. "\n" .. _("Number of tracks") .. "\n\n" .. "A",
            values = func.map(trackNumberList, tostring),
            defaultIndex = 1
        },
        {
            key = "nbTracksB",
            name = "B",
            values = func.map(trackNumberList, tostring),
            defaultIndex = 1
        },
        {
            key = "nbTransitTracksA",
            name = sp .. "\n" .. _("Transit Tracks") .. "\n\n" .. "A",
            values = func.map({0, 1, 2, 3, 4}, tostring),
            defaultIndex = 0
        },
        {
            key = "posTransitTracksA",
            name = _("Position"),
            values = {_("Centre"), _("Outter")},
            defaultIndex = 0
        },
        {
            key = "nbTransitTracksB",
            name = "\n" .. "B",
            values = func.map({0, 1, 2, 3, 4}, tostring),
            defaultIndex = 0
        },
        {
            key = "posTransitTracksB",
            name = _("Position"),
            values = {_("Centre"), _("Outter")},
            defaultIndex = 0
        },
        {
            key = "radiusA",
            name = sp .. "\n" .. _("Radius") .. " " .. "(m)" .. "\n\n" .. "A",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "radiusB",
            name = "B",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "curveLayout",
            name = _("Polarity"),
            values = {"--", "-+", "++"},
            defaultIndex = 1
        },
        {
            key = "signC",
            name = "",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "radiusC",
            name = "C",
            values = pipe.from("∞") + func.map(func.range(rList, 2, #rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
            defaultIndex = 0
        },
        {
            key = "lengthA",
            name = sp .. "\n" .. _("Platform") .. "\n\n" .. _("Length") .. " " .. "(m)" .. "\n\n" .. "A",
            values = func.map(trackLengths, tostring),
            defaultIndex = 5
        },
        {
            key = "lengthB",
            name = "B",
            values = func.map(trackLengths, tostring),
            defaultIndex = 5
        },
        {
            key = "hPlatform",
            name = _("Height") .. " " .. "(mm)",
            values = func.map(hPlatformList, tostring),
            defaultIndex = 3
        },
        {
            key = "wPlatform",
            name = _("Width") .. " " .. "(m)",
            values = func.map(wPlatformList, tostring),
            defaultIndex = 1
        },
        {
            key = "hasLeftPlatform",
            name = _("Leftmost Platform"),
            values = {_("No"), _("Yes")},
            defaultIndex = 1
        },
        {
            key = "hasMiddlePlatform",
            name = _("Central Platform"),
            values = {_("No"), _("Yes")},
            defaultIndex = 1
        },
        {
            key = "hasRightPlatform",
            name = _("Rightmost Platform"),
            values = {_("No"), _("Yes")},
            defaultIndex = 1
        },
        {
            key = "roofLength",
            name = _("Roof length") .. " " .. "(%)",
            values = func.map(roofLengthList, tostring),
            defaultIndex = 3
        },
        {
            key = "wExtPlatform",
            name = sp .. "\n" .. _("Platform Variation") .. "\n",
            values = func.map(extWidthList, tostring),
            defaultIndex = 0
        },
        {
            key = "varModelWidth",
            name = _("Narrowest Extremity Width") .. " " .. "(%)",
            values = {_("Uniform"), _("Linear"), _("Quadratic"), _("Quartic"), _("Gaussain"), _("Gaussain 2")},
            defaultIndex = 1
        },
        {
            key = "lExtPlatform",
            name = "",
            values = func.map(extLengthList, tostring),
            defaultIndex = 0
        },
        {
            key = "varModelLength",
            name = _("Shortest Platform") .. " " .. "(%)",
            values = {_("Uniform"), _("Linear"), _("Quadratic"), _("Quartic"), _("Gaussain"), _("Gaussain 2")},
            defaultIndex = 1
        },
        {
            key = "yOffsetPlatformSign",
            name = "",
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "yOffsetPlatform",
            name = _("Offset Platform Max.") .. " " .. "(%)",
            values = func.map(yOffsetList, tostring),
            defaultIndex = 0
        },
        {
            key = "varNbUnaffected",
            name = "\n" .. _("Unaffected platforms") .. " " .. "(%)",
            values = func.map(varUnaffectedList, tostring),
            defaultIndex = 0
        },
        {
            key = "slopeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "slope",
            name = _("Slope") .. " " .. "(‰)",
            values = func.map(slopeList, tostring),
            defaultIndex = 0
        },
        {
            key = "entrySize",
            name = sp .. "\n" .. _("Main Entry"),
            values = {_("None"), _("S"), _("M"), _("L"), _("XL")},
            defaultIndex = 2
        },
        {
            key = "entryPos",
            name = _("Position"),
            values = {"A", _("Central"), "C"},
            defaultIndex = 1
        },
        {
            key = "entryASide",
            name = "",
            values = {_("Left"), _("Both"), _("Right")},
            defaultIndex = 1,
        },
        {
            key = "entryAType",
            name = _("Entry") .. " " .. "A",
            values = {_("Underground"), _("Surface"), _("None")},
            defaultIndex = 1,
        },
        {
            key = "entryBSide",
            name = "",
            values = {_("Left"), _("Both"), _("Right")},
            defaultIndex = 1,
        },
        {
            key = "entryBType",
            name = _("Entry") .. " " .. "B",
            values = {_("Underground"), _("Surface"), _("None")},
            defaultIndex = 1,
        },
        {
            key = "entryCSide",
            name = "",
            values = {_("Left"), _("Both"), _("Right")},
            defaultIndex = 1,
        },
        {
            key = "entryCType",
            name = _("Entry") .. " " .. "C",
            values = {_("Underground"), _("Surface"), _("None")},
            defaultIndex = 1,
        },
        {
            key = "fencesPos",
            name = sp .. "\n" .. _("Fences"),
            values = {_("None"), "A", "B", "A".."+".."B"},
            defaultIndex = 0
        },
        {
            key = "fencesStyle",
            name = _("Fences Style"),
            values = {"A", "B", _("C")},
            defaultIndex = 0
        },
        {
            key = "fencesColor",
            name = _("Fences Color"),
            values = {_("White"), _("Green"), _("Yellow")},
            defaultIndex = 0
        },
        {
            key = "altitudeSign",
            name = sp,
            values = {"+", "-"},
            defaultIndex = 0
        },
        {
            key = "altitude",
            name = _("General Altitude").."(m)",
            values = func.map(hStation, tostring),
            defaultIndex = 0
        }
    }
end

local arcPacker = function(length, slope)
    return function(radiusA, oA, radiusB, oB, lengthVar, dislodge)
        local length = lengthVar and (length * lengthVar) or length
        local dislodgeA = dislodge and (dislodge * length / radiusA) or 0
        local dislodgeB = dislodge and (dislodge * length / radiusB) or 0
        local initRadA = (radiusA > 0 and pi or 0)
        local initRadB = (radiusB > 0 and pi or 0)
        return function(z)
            local z = z or 0
            return function(lengthOverride)
                local l = lengthOverride and lengthOverride(length) or length
                return function(xDr)
                    local dr = xDr or 0
                    local arA = arc.byOR(oA + coor.xyz(0, 0, z), abs(radiusA - dr))
                    local arB = arc.byOR(oB + coor.xyz(0, 0, z), abs(radiusB - dr))
                    local radA = (radiusA > 0 and 1 or -1) * l / arA.r * 0.5
                    local radB = (radiusB > 0 and 1 or -1) * l / arB.r * 0.5
                    return pipe.new
                        / arA:withLimits({
                            sup = initRadA - radA + dislodgeA,
                            inf = initRadA,
                            slope = -slope
                        })
                        / arB:withLimits({
                            inf = initRadB,
                            sup = initRadB + radB + dislodgeB,
                            slope = slope
                        })
                end
            end
        end
    end
end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    param.trackType = param.trackType or 0
    param.catenary = param.catenary or 0
    
    func.forEach(
        func.filter(params({}), function(p) return p.key ~= "tramTrack" end),
        function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end


local function retriveRef(config, arcCoords)
    if (not config.buildingParams) then return false end
    
    local central = arcCoords * pipe.filter(function(ar)
        local lm, rm = ar.platform.lc[ar.platform.c], ar.platform.rc[ar.platform.c]
        local le, re = ar.platform.lc[#ar.platform.lc], ar.platform.rc[#ar.platform.rc]
        return ((le - re):length() - (lm - rm):length()) >= (config.buildingParams.halfWidth)
    end)
    
    if (#central == 0) then return false end
    
    local central = table.unpack(central)
    return function()
        local pl, la, su = central.platform, central.lane, central.surface
        local fplc = floor(pl.c * 0.5)
        local flac = floor(la.c * 0.5)
        local le, re = la.lc[#la.lc], la.rc[#la.rc]
        local refVec = (le - re):normalized() .. coor.rotZ(-0.5 * pi)
        local refPt = le:avg(re)
        return refPt,
            ust.mRot(refVec),
            la.lc[la.c + 4 + flac]:avg(la.rc[la.c + 4 + flac], la.lc[la.c + 5 + flac], la.rc[la.c + 5 + flac]),
            pl.lc[pl.c + 3 + fplc]:avg(pl.rc[pl.c + 3 + fplc])
    end
end

local buildStation = function(nbTracksA, nbTracksB, arcPackerA, arcPackerB, config, hasFirst, hasCentral, hasLast)
    local pW = config.wPlatform
    local tW = config.wTrack
    local bandWidth = 0.8
    local pWe = config.wExtPlatform * (pW - bandWidth * 2) + bandWidth * 2
    local fitModel = slope == 0 and ust.fitModel2D or ust.fitModel
    
    local ptListA = ust.preBuild(nbTracksA, config.nbTransitTracksA, config.posTransitTracksA, not hasCentral, not hasFirst)(nbTracksA, pipe.new) * pipe.rev()
    local ptListB = ust.preBuild(nbTracksB, config.nbTransitTracksB, config.posTransitTracksB, not hasCentral, not hasLast)(nbTracksB, pipe.new)
    
    local ptListIA = ptListA * pipe.range(1, #ptListA - (hasCentral and 1 or 0)) * pipe.zip(func.seq(1, #ptListA), {"t", "i"})
    local ptListIB = ptListB * pipe.range(hasCentral and 2 or 1, #ptListB) * pipe.zip(func.seq(#ptListA + 1, #ptListA + #ptListB + 1), {"t", "i"})
    
    local middlePos = hasCentral and #ptListA or (#ptListA + 0.5)
    local leftGroup = ptListIA * pipe.rev()
    local middleGroup = pipe.new * (hasCentral and {{i = #ptListA, t = false}} or {})
    local rightGroup = ptListIB
    
    local platformArcGenA = ust.platformDualArcGen(tW, pW)(arcPackerA)
    local platformArcGenB = ust.platformDualArcGen(tW, pW)(arcPackerB)
    
    local lengthFn = function(posPct) return 1 - (1 - config.lExtPlatform) * ust.varFn(config.lExtPlatform)[config.varModelLength](posPct) end
    local widthFn = function(posPct) return (1 - (1 - config.wExtPlatform) * ust.varFn(config.wExtPlatform)[config.varModelWidth](posPct)) * (pW - bandWidth * 2) + bandWidth * 2 end
    
    local function generateArcs(init, initDrA, initXA, initDrB, initXB)
        local function arcGen(result, rA, oA, rB, oB, isRight)
            return isRight
                and function(t, ...)
                    if t == nil then
                        return result * pipe.sort(function(l, r) return l.i < r.i end) * pipe.map(pipe.select("a"))
                    else
                        local posPct = abs(t.i - middlePos) / (#rightGroup)
                        local isVar = posPct >= config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        local offsetPct = isVar and -posPct * config.yOffsetPlatform or 0
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPackerB(rA - tW, oA, rB - tW, oB, isVar and lengthPct or 1, offsetPct)}},
                                rA - tW, oA, rB - tW, oB, true)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(result / {
                                    i = t.i,
                                    a = {
                                        arcPackerB(rA - (0.5 * tW), oA, rB - (0.5 * tW), oB, lengthPct, offsetPct),
                                        arcPackerB(rA - (0.5 * tW + pW), oA, rB - (0.5 * tW + pW), oB, lengthPct, offsetPct)
                                    }},
                                    rA - pW, oA, rB - pW, oB, true)(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local rA, oA, rB, oB, a = platformArcGenA(rA, oA, rB, oB, lengthPct, offsetPct, pWe, true)
                                return arcGen(result / {i = t.i, a = a},
                                    rA, oA, rB, oB, true)(...)
                            end
                        end
                    end
                end
                or function(t, ...)
                    if t == nil then
                        return arcGen(result, initDrA[#initDrA], initXA[#initXA], initDrB[#initDrB], initXB[#initXB], true)(table.unpack(rightGroup))
                    else
                        local posPct = abs(t.i - middlePos) / (#leftGroup)
                        local isVar = posPct >= config.varNbUnaffected
                        local lengthPct = isVar and lengthFn(posPct) or 1
                        local offsetPct = isVar and posPct * config.yOffsetPlatform or 0
                        if t.t then
                            return arcGen(result / {i = t.i, a = {arcPackerA(rA + tW, oA, rB + tW, oB, lengthPct, offsetPct)}},
                                rA + tW, oA, rB + tW, oB)(...)
                        else
                            if (not isVar or (config.wExtPlatform == 1)) then
                                return arcGen(result / {
                                    i = t.i,
                                    a = {
                                        arcPackerA(rA + (0.5 * tW + pW), oA, rB + (0.5 * tW + pW), oB, lengthPct, offsetPct),
                                        arcPackerA(rA + (0.5 * tW), oA, rB + (0.5 * tW), oB, lengthPct, offsetPct)
                                    }},
                                    rA + pW, oA, rB + pW, oB)(...)
                            else
                                local pWe = isVar and widthFn(posPct) or pW
                                local rA, oA, rB, oB, a = platformArcGenB(rA, oA, rB, oB, lengthPct, offsetPct, pWe, false)
                                return arcGen(result / {i = t.i, a = a},
                                    rA, oA, rB, oB)(...)
                            end
                        end
                    end
                end
        end
        local rs = arcGen(init, initDrA[1], initXA[1], initDrB[1], initXB[1])(table.unpack(leftGroup))
        return rs
    end
    
    local allArcs = pipe.exec * function()
        local oA = coor.xyz(config.rA, 0, 0)
        local oB = coor.xyz(config.rB, 0, 0)
        local oC = coor.xyz(config.rC, 0, 0)
        if (hasCentral) then
            return generateArcs(
                pipe.new / {
                    i = middlePos,
                    a = {
                        arcPackerA(config.rC + 0.5 * pW, oC, config.rA + 0.5 * pW, oA),
                        arcPackerB(config.rC - 0.5 * pW, oC, config.rB - 0.5 * pW, oB)
                    }
                },
                {
                    config.rC - (-0.5 * pW + 0.5 * tW),
                    config.rC - (0.5 * pW - 0.5 * tW),
                }, {oC, oC},
                {
                    config.rA - (-0.5 * pW + 0.5 * tW),
                    config.rB - (0.5 * pW - 0.5 * tW)
                }, {oA, oB}
        )
        else
            return generateArcs(
                pipe.new * {},
                {
                    config.rC - (0.5 * tW),
                    config.rC - (-0.5 * tW)
                }, {oC, oC},
                {
                    config.rA - (0.5 * tW),
                    config.rB - (-0.5 * tW)
                }, {oA, oB}
        )
        end
    end
    * ust.allArcs(arcGen, config)
    
    local arcCoords = allArcs * pipe.filter(function(a) return #a > 1 end)
    local retriveRef = retriveRef(config, arcCoords)
    
    local entryConfig = ust.entryConfig(config, allArcs)
    
    local build = ust.build(
        config,
        pipe.new
        / uste.buildEntry(config, entryConfig, retriveRef)
        / uste.buildUndergroundEntry(config, entryConfig)
        / uste.buildSecondEntrySlope(config, entryConfig),
        ust.generateEdges,
        ust.generateModels(fitModel, config),
        ust.generateTerminals(config),
        ust.generateFences(fitModel, config),
        ust.generateTerrain(config)
    )

    return build(pipe.new, pipe.new, pipe.new, pipe.new, pipe.new, ust.trackGrouping(pipe.new, table.unpack(allArcs)))
end

local updateFn = function()
    return function(params)
        defaultParams(params)
        
        local trackType = ({"standard.lua", "high_speed.lua"})[params.trackType + 1]
        local catenary = params.catenary == 1
        local trackBuilder = trackEdge.builder(catenary, trackType)
        local hPlatform = hPlatformList[params.hPlatform + 1] * 0.001
        local wPlatform = wPlatformList[params.wPlatform + 1]
        local roofLength = roofLengthList[params.roofLength + 1] * 0.01
        local mainBuilding = params.entrySize > 0 and buildingList[params.entrySize]
        local fencesLength = fencesLengthList[params.fencesStyle + 1]
        local fencesModel = fencesGen(params.fencesColor + 1, params.fencesStyle + 1)
        
        
        local nbTracksA = trackNumberList[params.nbTracksA + 1]
        local nbTracksB = trackNumberList[params.nbTracksB + 1]
        local radiusA = (rList[params.radiusA + 1] * 1000) * (params.curveLayout == 2 and 1 or -1)
        local radiusB = (rList[params.radiusB + 1] * 1000) * (params.curveLayout == 0 and -1 or 1)
        local radiusC = (rList[params.radiusC + 1] * 1000) * (params.signC == 0 and 1 or -1)
        
        if (params.curveLayout == 0 and radiusA < radiusB) or (params.curveLayout == 2 and radiusA < radiusB) then
            radiusA, radiusB = radiusB, radiusA
        end

        local slope = slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1)
        
        local lengthA = min(trackLengths[params.lengthA + 1], abs(radiusA * pi * 1.75))
        local lengthB = min(trackLengths[params.lengthB + 1], abs(radiusB * pi * 1.75))
        
        local entryConfig = {
            main = {
                pos = mainBuilding and (params.entryPos - 1),
                model = mainBuilding,
            },
            street = {
                pipe.mapn(
                    {params.entryAType == 1, params.entryBType == 1, params.entryCType == 1},
                    {params.entryASide < 2, params.entryBSide < 2, params.entryCSide < 2}
                )(function(t, v) return t and v end),
                pipe.mapn(
                    {params.entryAType == 1, params.entryBType == 1, params.entryCType == 1},
                    {params.entryASide > 0, params.entryBSide > 0, params.entryCSide > 0}
                )(function(t, v) return t and v end)
            },
            underground = {
                pipe.mapn(
                    {params.entryAType == 0, params.entryBType == 0, params.entryCType == 0},
                    {params.entryASide < 2, params.entryBSide < 2, params.entryCSide < 2}
                )(function(t, v) return t and v end),
                pipe.mapn(
                    {params.entryAType == 0, params.entryBType == 0, params.entryCType == 0},
                    {params.entryASide > 0, params.entryBSide > 0, params.entryCSide > 0}
                )(function(t, v) return t and v end)
            }
        }

        local edge, streetEdge, terminals, terminalsGroup, models, terrain =
            buildStation(nbTracksA, nbTracksB,
                arcPacker(lengthA, slope, lengthA / radiusA * 0.5),
                arcPacker(lengthB, slope, lengthB / radiusB * 0.5),
                {
                    nbTransitTracksA = params.nbTransitTracksA,
                    posTransitTracksA = params.posTransitTracksA,
                    nbTransitTracksB = params.nbTransitTracksB,
                    posTransitTracksB = params.posTransitTracksB,
                    rA = radiusA,
                    rB = radiusB,
                    rC = radiusC,
                    hPlatform = hPlatform,
                    wPlatform = wPlatform,
                    wExtPlatform = extWidthList[params.wExtPlatform + 1] * 0.01,
                    lExtPlatform = extLengthList[params.lExtPlatform + 1] * 0.01,
                    yOffsetPlatform = yOffsetList[params.yOffsetPlatform + 1] * (params.yOffsetPlatformSign == 0 and 0.01 or -0.01),
                    varNbUnaffected = varUnaffectedList[params.varNbUnaffected + 1] * 0.01,
                    varModelLength = params.varModelLength + 1,
                    varModelWidth = params.varModelWidth + 1,
                    wTrack = 5,
                    roofLength = roofLength,
                    buildingParams = buildingParamsList[params.entrySize],
                    slope = slope,
                    fencesModel = fencesModel,
                    fencesLength = fencesLength,
                    leftFences = params.fencesPos == 1 or params.fencesPos == 3,
                    rightFences = params.fencesPos == 2 or params.fencesPos == 3,
                    entries = entryConfig,
                    models = models
                },
                params.hasLeftPlatform == 1,
                params.hasMiddlePlatform == 1,
                params.hasRightPlatform == 1
        )
        return
            pipe.new
            * {
                edgeLists = pipe.new
                / (pipe.new * {edge * station.mergeEdges} * station.prepareEdges * trackBuilder.normal())
                + streetEdge
                ,
                models = terminals + models,
                terminalGroups = terminalsGroup,
                terrainAlignmentLists = station.mergePoly(table.unpack(terrain))(),
                groundFaces = terrain
                * pipe.map(pipe.select("equal"))
                * pipe.filter(pipe.noop())
                * pipe.flatten()
                * pipe.map(function(f) return {
                    {face = f, modes = {{type = "FILL", key = "industry_gravel_small_01"}}},
                    {face = f, modes = {{type = "STROKE_OUTER", key = "building_paving"}}}
                } end)
                * pipe.flatten()
            }
    end
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Half-triangle Station"),
            description = _("Station that platform and track parameters can be fine-tuned, with two different radii on two sides of the station for half of the platforms, and one consistent radius for the other half.")
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0,
        },
        order = 27218,
        params = params(),
        updateFn = updateFn()
    }
end
